/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.02.2024 01:01:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 638864;
#else
constexpr int kTensorArenaSize = 637840;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,160,160,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 34707, -43371, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00018207631364930421, 0.00014022705727256835, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 10,-39,-49,96,-43,0,-27,37,104,2,-35,-45,-37,44,2,28,72,-41,-34,7,127,101,48,-72,-83,-88,34,97,-20,6,66,35, 
  /* [1][0][][] */ 51,63,63,-50,-62,63,-5,12,-35,-24,32,93,97,33,30,-3,-36,1,-48,-93,-77,21,27,94,76,63,-58,-7,102,-93,-127,-13, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0055070659145712852, 0.0042412965558469296, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -12, -155, -184, -289, -309, -147, -447, 191, 517, 343, -242, -7, -111, -12, -558, -106, 263, -922, -220, 522, 538, 339, -268, -111, -54, -229, 627, 681, 87, 285, 1675, -280, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0988314140122384e-05, 5.8082678151549771e-05, 4.9847370974021032e-05, 4.5389580918708816e-05, 4.1540060919942334e-05, 4.17147675761953e-05, 4.2528386984486133e-05, 4.0257047658087686e-05, 4.576233186526224e-05, 7.7244068961590528e-05, 4.55675290140789e-05, 4.3397576519055292e-05, 4.2372979805804789e-05, 4.4115386117482558e-05, 5.8077133871847764e-05, 5.1292805437697098e-05, 5.7409266446484253e-05, 4.9777438107412308e-05, 4.2324394598836079e-05, 4.7971436288207769e-05, 4.9258127546636388e-05, 4.0383518353337422e-05, 4.4197164243087173e-05, 5.9067482652608305e-05, 6.4669766288716346e-05, 4.7098001232370734e-05, 5.3462194046005607e-05, 8.3733750216197222e-05, 5.811256414745003e-05, 4.2677198507590219e-05, 6.9459099904634058e-05, 4.653375071939081e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -34,-51,104,9,107,-20,-97,-81,59,-87,-113,5,66,14,-28,57,-57,-30,-57,-55,-67,-97,-5,125,-122,17,94,-51,124,10,-26,-91,97,-62,-91,75,-111,-89,-85,37,56,-95,-116,100,50,-125,127,-14,14,-64,-27,62,-77,-45,-104,116,12,76,99,-126,-97,93,-36,44,-4,19,82,104,61,103,97,-123,117,-116,46,84,-119,27,-66,36,46,11,100,-69,-67,-46,-103,90,29,119,-4,-119,20,88,26,15, 
  /* [1][0][][] */ -39,24,-57,-2,-24,57,21,21,52,-63,-86,85,55,-18,27,47,84,-28,32,89,-33,5,17,30,17,17,-20,80,15,13,68,-53,52,80,-2,27,41,33,-6,-40,-67,-4,-31,-76,-28,16,-9,-38,-16,-73,88,8,4,67,-65,-32,5,79,20,47,-57,93,-38,-67,-40,31,62,34,82,26,17,3,-74,53,-37,29,56,-22,-35,55,-69,55,-37,-127,14,83,-68,-60,53,55,74,19,68,82,11,-17, 
  /* [2][0][][] */ 45,31,-56,82,-13,-54,66,98,-92,90,-41,108,87,-9,82,-99,-46,-21,36,49,-79,0,83,30,-31,73,103,9,-50,80,61,76,-49,-14,-73,-84,-71,65,95,-14,-127,-78,-4,-10,-76,86,-5,-64,88,20,81,-117,-45,60,10,22,-75,88,-83,-13,-31,60,-17,50,83,46,47,80,-76,64,14,-68,42,-85,26,17,-52,-7,-1,11,21,-91,-8,-88,-6,-89,-36,-42,72,91,-15,6,-30,-53,-54,-76, 
  /* [3][0][][] */ 61,-5,35,-27,-70,39,-109,42,42,3,60,10,82,84,63,6,93,88,-59,13,103,-101,-57,-109,-26,-116,-81,99,34,-100,86,-1,-72,-40,-22,-27,-81,-26,40,48,-35,-88,-73,2,68,23,-48,-81,56,-81,45,122,97,25,83,-99,-118,-113,-108,-49,-93,29,-43,76,53,-39,-62,-37,-37,-61,-8,95,12,-99,52,-55,24,93,93,-64,-85,-127,35,88,26,41,-48,-103,-80,40,-7,-100,61,-102,-87,39, 
  /* [4][0][][] */ 51,100,-2,53,-33,-33,26,12,64,86,-10,56,25,-42,-15,-71,-27,-12,-72,7,108,-91,84,19,-24,-12,60,-66,-52,34,-74,-57,65,113,11,-109,-60,-11,-120,50,-51,-68,-72,-99,23,106,33,52,20,-49,-26,-72,-95,44,-104,17,39,-98,28,16,3,-77,-45,-75,-55,53,-1,-41,26,-104,-104,-91,-60,16,99,53,57,-32,-13,-64,0,-51,-105,-24,-1,65,93,1,-127,-84,42,41,38,102,-106,-24, 
  /* [5][0][][] */ 103,-94,73,84,46,-123,19,77,98,-103,-12,-64,31,104,47,36,65,65,-66,103,35,64,5,-16,-118,-60,-3,-95,58,42,8,-109,-30,5,-66,25,-115,-51,53,30,-119,-63,22,94,-37,10,51,-50,-112,97,29,-13,35,23,27,-17,89,56,-89,-60,14,-62,53,-84,-29,107,-21,34,81,5,110,-77,-37,61,-30,-82,2,-35,6,87,96,32,30,56,-92,80,-28,24,64,-108,127,91,-12,43,62,-100, 
  /* [6][0][][] */ 12,-49,105,69,-93,-64,-8,60,-19,-83,-3,-97,80,51,110,-125,39,-1,-2,99,-85,-121,103,50,-65,-86,-14,-64,-32,-119,38,-81,-98,-127,-51,-111,-14,37,-114,76,84,52,14,-22,-116,98,-92,-47,-79,11,-34,-67,51,-55,91,-30,6,-14,-74,107,-102,-3,67,-79,-59,60,96,-53,74,-11,-112,-13,51,-71,-97,-47,-85,-101,-64,-34,25,-31,40,-31,-75,-88,-49,-99,78,91,93,8,-59,-69,69,-32, 
  /* [7][0][][] */ 123,77,-48,-51,-74,109,-18,20,121,12,-92,2,59,-90,54,85,48,20,15,127,62,43,-9,93,-70,117,47,54,-81,118,-25,30,30,26,73,111,-108,107,-1,-37,85,-75,78,73,54,-2,109,-112,40,-50,-108,-89,-25,98,20,30,110,-100,-15,-65,-1,-11,98,-120,-73,-67,83,30,-118,9,74,95,93,35,72,63,-76,63,-104,52,92,-45,-20,-111,91,44,-123,93,93,12,99,64,-63,-39,-2,-58, 
  /* [8][0][][] */ 0,33,-36,-81,54,46,-48,-26,27,20,62,73,-11,-43,-92,-69,-70,85,-55,14,32,-42,88,86,-94,88,20,66,-78,2,-77,127,84,-34,33,-3,99,42,-16,41,116,111,-94,-108,0,-15,-54,90,2,-70,-55,56,-55,-5,-6,-115,71,88,-53,114,116,34,33,116,-36,-54,-19,95,-85,31,28,12,53,98,11,40,-39,76,84,67,50,111,-117,-23,27,41,108,-33,49,-31,-84,87,-77,-97,-21,97, 
  /* [9][0][][] */ -3,57,78,31,51,-55,-14,-61,36,22,11,43,-19,-45,-64,12,-1,-11,-56,-41,1,49,-48,-57,127,-3,-21,30,-11,-37,-29,57,34,-1,11,-6,-30,30,-13,-26,53,42,50,-35,45,38,-65,39,28,-4,-32,22,57,-58,-30,50,66,-38,25,19,-17,56,24,-21,-39,3,57,23,-24,57,54,-34,-1,74,-46,-40,-26,-81,-15,59,40,19,65,102,-19,-52,26,25,76,78,-21,73,66,-9,58,12, 
  /* [10][0][][] */ -52,75,81,-61,-10,98,90,46,28,47,7,-55,105,81,-20,8,-25,78,-85,-57,-14,41,37,-53,16,57,-94,-107,-35,88,-97,-82,91,98,119,79,-37,-13,-27,41,-62,96,-127,-45,-97,-73,18,-52,1,-11,38,-36,50,27,-70,-26,-113,-7,-7,-69,-24,85,120,27,115,-65,-85,-15,28,-10,-82,-72,96,40,-81,93,-23,77,54,23,58,-8,55,33,-102,60,70,-42,24,-1,3,-67,-38,-23,-59,-82, 
  /* [11][0][][] */ 117,12,-21,106,127,41,48,68,116,113,-80,116,7,-74,41,-67,-51,-95,73,45,41,92,17,-95,-89,-84,-1,72,92,11,21,-23,-72,-66,64,57,-52,67,-9,-50,-51,97,-102,-13,-46,-83,-68,-78,77,94,118,19,-90,-81,13,34,-76,-47,-39,-113,-100,96,103,4,37,93,-48,35,94,62,-66,-76,60,90,-96,48,-71,51,-49,94,-117,-33,-60,-92,43,-84,11,-58,-91,-10,20,-104,-75,-10,-81,-47, 
  /* [12][0][][] */ 18,70,-59,2,95,4,-44,57,-80,78,-23,23,-35,18,61,-81,-96,-30,-40,-78,34,4,8,112,-69,-43,117,-98,105,28,-44,111,-75,-67,-38,25,4,-88,-10,53,89,32,-127,-45,-23,-98,-22,124,-44,-127,-72,63,35,8,-92,94,-38,-52,26,48,44,125,12,46,118,40,-38,124,64,108,50,70,99,99,-16,-11,-41,52,-119,-90,-68,94,52,-34,-43,30,36,101,-97,-113,101,44,111,4,22,64, 
  /* [13][0][][] */ 109,-66,98,92,92,105,71,86,62,-89,10,-34,95,76,76,-52,-120,-73,-55,30,74,-14,101,-40,-101,44,17,14,-80,-74,71,31,47,102,-15,43,-78,-28,33,65,-81,57,-60,10,-44,16,4,-29,8,99,-31,-127,-99,35,92,-76,-60,29,-53,-80,-33,118,-60,4,-51,-61,-79,88,-33,-18,101,-2,-82,28,-69,-47,-110,64,79,-57,45,-100,92,-15,-87,-107,77,99,-11,-61,-68,52,114,-37,61,-12, 
  /* [14][0][][] */ -40,-76,66,44,53,-28,-32,-80,-79,-36,48,59,-18,-68,-61,-66,-39,-51,3,8,-35,18,-9,55,-127,-63,-18,26,-89,-86,-63,21,73,-15,-25,-10,64,66,19,-76,-18,-106,27,69,45,-86,61,-77,77,16,46,17,69,-19,-31,9,-52,10,18,76,-19,-60,-30,38,-71,0,52,-86,-66,-68,-74,69,5,40,33,-70,38,-85,44,12,30,-34,-92,-57,-94,-78,-98,74,71,-13,54,-34,55,64,-16,22, 
  /* [15][0][][] */ -6,-24,-23,52,72,-77,57,-82,54,-23,-54,-3,71,-12,-88,-96,64,-1,-80,16,37,-10,60,78,81,49,17,72,6,40,55,-90,-10,-6,-67,-12,-58,118,91,-73,23,106,-31,-22,15,-68,-63,-72,-20,-63,4,68,-78,-90,-33,-28,58,28,-32,91,-31,-67,-4,94,-36,69,-61,-4,-61,-16,36,-59,-3,29,47,-84,-7,30,89,60,-62,50,-101,-20,-109,-33,-69,32,77,66,-102,-42,34,83,-76,127, 
  /* [16][0][][] */ -57,3,81,-47,27,84,-28,16,48,20,-65,40,-19,-37,-49,-40,74,58,50,48,81,48,-15,26,-11,38,-65,46,-84,-1,38,14,-88,55,36,37,-27,61,-39,-64,43,-21,72,74,51,93,58,-10,-47,-65,4,127,-24,81,62,26,39,59,82,30,104,70,14,59,38,2,-31,66,27,63,-27,0,10,93,51,74,-2,59,-74,-10,24,-51,42,58,18,81,101,22,67,19,-15,84,43,-41,-48,43, 
  /* [17][0][][] */ 15,-113,4,54,-49,-105,-76,-93,11,-85,50,37,76,33,-102,21,24,34,78,88,-95,-24,-16,-49,1,44,-69,2,84,-49,-50,52,-34,-34,13,0,-54,63,-92,-34,-101,-57,-43,-26,0,-14,62,-111,69,68,-29,6,-40,66,71,-77,-122,63,-98,-118,11,-82,56,60,-87,-73,32,-97,-103,-19,75,4,2,-127,-80,39,80,-40,11,-68,-18,-27,-93,-99,-124,51,40,-42,-7,48,-95,-116,-17,85,-10,-11, 
  /* [18][0][][] */ -97,97,110,-75,-14,-125,-110,25,-6,62,-111,-30,-37,36,61,-58,18,-37,43,-27,98,-22,16,-84,25,-114,-17,108,31,38,-10,34,45,-35,-108,-112,-37,30,-21,68,-61,-5,-54,-11,-122,11,36,-2,10,-35,61,34,-110,1,-12,97,-52,35,-20,-122,88,111,8,32,-78,-125,-25,88,66,-87,-65,102,-91,-33,-77,-107,52,56,-2,-68,-60,-15,-32,-70,127,-38,67,77,-109,-81,-64,103,89,-52,47,-17, 
  /* [19][0][][] */ 7,51,79,44,56,-76,113,77,101,-63,47,8,-86,33,-52,65,63,-96,89,58,-14,75,-33,12,127,-68,18,-49,-80,-109,-54,50,80,-76,32,11,20,-43,-49,-64,61,-83,-59,26,-68,50,54,-66,-25,40,-34,111,-17,6,36,-13,47,88,37,-3,71,-51,79,74,-59,-8,-21,-2,-8,51,72,-34,-61,-93,-36,-53,-4,-108,22,108,76,-88,-18,124,-74,-5,19,-3,100,59,-6,63,-17,97,76,-14, 
  /* [20][0][][] */ -3,66,80,93,-73,91,34,44,30,-5,-48,9,-6,86,31,-52,-42,-32,-57,-26,22,-40,-45,-64,85,-60,-97,46,17,5,-8,116,85,43,-12,50,40,0,-10,-92,-32,-17,-45,-76,-19,-34,-70,98,47,-75,-85,98,58,88,71,1,114,64,127,112,124,-53,-74,-4,-19,-58,-42,14,-72,-66,-52,82,-62,-44,40,30,110,43,106,100,106,27,76,45,73,106,30,81,32,94,22,74,19,9,16,33, 
  /* [21][0][][] */ 103,85,76,-102,117,-87,86,34,-6,-49,-75,41,12,45,-42,-89,-108,-25,38,-4,122,-44,72,-83,64,-78,-25,80,27,16,-2,-29,16,27,-90,-105,125,108,-115,-28,-16,16,26,-10,-101,-87,-75,107,-27,-73,11,83,43,86,-96,32,-64,62,-72,113,53,-69,28,-6,95,38,-25,-63,-103,2,66,90,46,-22,82,79,-124,-13,71,119,13,98,45,-98,27,-91,58,-84,-105,90,127,-120,-37,-58,76,-18, 
  /* [22][0][][] */ 33,-66,-67,-97,79,-68,88,62,-107,78,-84,-117,111,-110,-103,-87,34,73,-98,-61,88,-69,19,39,75,-9,-106,95,-59,-72,-79,-116,46,58,17,4,0,-34,-67,-115,-30,-26,2,97,59,-112,94,-34,-77,-75,-5,-40,-67,-102,-60,34,-34,-32,-45,-27,103,-75,-76,-127,-73,19,-111,-45,106,102,-23,-9,-66,-9,61,-93,41,-48,62,92,103,-100,-72,-121,67,80,83,-34,-64,16,-61,61,13,23,-39,83, 
  /* [23][0][][] */ 51,-68,0,44,78,-83,-1,-52,31,-43,52,66,21,-77,23,-32,69,-21,-70,75,70,-51,63,-14,-22,-4,72,16,59,46,50,-30,-20,35,19,32,73,-16,-74,16,-101,-6,-6,-84,-50,-81,95,22,58,-89,-58,-79,57,-38,-39,71,-77,-7,45,15,-96,-56,-24,-13,28,33,-78,-75,51,-5,84,-55,6,-40,-29,-73,26,-5,61,85,-48,-43,18,-127,60,1,65,-32,-73,23,82,-3,88,-22,-31,51, 
  /* [24][0][][] */ -43,-35,-68,-39,-46,-68,-49,-40,40,97,48,45,88,47,-14,-80,-46,32,26,-31,71,-41,-47,-11,28,-11,63,41,82,48,4,-40,12,13,41,31,-30,-65,48,-1,-69,-71,58,-2,16,-38,47,53,-55,-35,-4,-20,48,47,44,-39,-13,62,-7,-12,48,10,38,61,-57,73,-23,-53,-59,46,-31,-18,-13,17,62,64,38,-37,-74,-52,-58,-63,-38,-127,-3,40,-21,-82,13,-76,12,-47,2,39,-67,16, 
  /* [25][0][][] */ -73,-60,-77,-4,96,-68,-101,87,32,-78,-50,39,78,2,-87,-28,-59,59,43,-96,67,90,-26,-36,1,-39,-75,36,82,-65,33,100,98,-97,49,77,95,-67,-6,-4,-99,77,-108,-7,86,9,84,38,-89,71,-55,-32,40,-10,-64,18,-31,58,-127,46,87,52,67,35,9,77,-9,-1,-75,8,-15,-106,49,-118,61,12,56,84,2,19,34,36,-33,20,-79,-52,-113,-110,-30,-50,102,23,-93,11,-25,-88, 
  /* [26][0][][] */ 50,-88,0,2,-77,13,10,-8,-65,-111,110,62,-66,-26,5,-6,91,20,-46,-52,19,53,98,4,59,59,2,40,9,-2,-56,20,-19,-43,-81,-72,-51,102,-35,64,-29,90,73,31,-56,78,-43,83,-40,64,3,127,24,-40,22,-92,118,45,78,51,18,-86,48,0,95,-15,-38,51,-66,59,83,97,55,-40,-62,25,45,-104,-66,12,6,94,75,-18,70,3,-4,23,-48,104,11,23,-32,100,58,100, 
  /* [27][0][][] */ 7,4,-22,-44,-62,-32,-19,1,38,48,48,-55,-19,35,43,-4,33,-9,45,-31,-39,3,6,-29,-34,32,-59,-10,29,13,3,6,28,37,-47,-44,-28,2,-39,50,-18,38,40,30,69,29,26,63,25,59,45,122,-19,-36,38,-18,56,-17,-9,-13,17,-34,-15,54,26,-31,-46,56,26,11,-58,32,23,15,15,-17,24,-55,58,52,72,7,66,127,-40,-21,4,67,-7,29,-15,-23,30,-2,94,91, 
  /* [28][0][][] */ 54,2,44,34,-72,-54,-61,-65,-44,-91,25,55,-56,-68,-15,95,76,91,-75,78,-66,2,-66,-49,-92,56,-52,-32,-44,-47,-3,-20,-109,10,63,54,46,-87,-22,38,33,52,-114,42,-95,-37,23,66,33,-68,-46,-127,-54,31,21,35,19,1,69,-5,-41,-33,-51,19,60,42,-3,68,-52,27,-89,-107,64,17,13,-82,-79,-37,-90,52,-73,-82,69,-75,57,-74,28,-72,-82,-62,-14,-87,-51,2,-111,-69, 
  /* [29][0][][] */ 55,54,73,-40,-85,37,-101,4,102,-28,-77,-94,105,-99,-55,-43,-95,98,26,-64,-78,-42,63,-6,-31,7,-51,-21,-102,-8,118,17,51,5,-83,-50,-6,119,-5,86,83,115,-25,89,8,114,-64,-29,3,0,63,-55,84,-90,125,49,-68,55,-23,120,-100,104,-102,-33,-58,-60,52,94,101,-92,31,-63,108,92,66,40,127,-77,-28,35,13,-49,-11,-45,77,121,68,87,-29,102,72,88,-105,11,7,75, 
  /* [30][0][][] */ 30,2,-8,45,-48,32,11,-8,82,-10,37,-20,-57,25,41,48,7,42,73,-36,33,-64,-26,4,-21,35,-42,86,-4,-64,-21,27,-51,-24,-64,-23,22,44,15,23,121,-3,20,94,96,44,63,60,-38,76,35,9,85,-17,42,73,-17,-25,-4,-4,-31,9,-49,30,-47,-45,-31,79,-22,83,30,14,-52,126,59,-2,-26,-48,-12,-21,58,49,-33,73,-44,65,-35,127,19,5,71,51,-10,-2,31,22, 
  /* [31][0][][] */ 68,-89,27,84,43,56,-50,-97,-38,-28,-71,-91,84,-118,-56,101,-62,-81,34,41,49,17,-28,91,37,-109,26,30,-76,-77,48,98,5,14,-94,-16,86,-31,-66,-113,75,-60,-38,25,-1,-51,-42,23,72,30,85,-2,-109,-57,-68,13,-100,55,2,108,-41,-13,70,-62,62,95,-48,-78,59,-127,-117,8,-97,-45,1,0,-61,-50,43,77,-75,-38,50,69,54,88,-84,14,14,-51,-86,-58,-5,83,-4,-30, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017420032527297735, 0.0024685137905180454, 0.0021185132209211588, 0.0019290571799501777, 0.0017654525581747293, 0.0017728775274008512, 0.0018074564868584275, 0.0017109244363382459, 0.0019448990933597088, 0.0032828729599714279, 0.0019366199849173427, 0.0018443969311192632, 0.0018008515471592546, 0.0018749037990346551, 0.0024682781659066677, 0.0021799441892653704, 0.0024398937821388245, 0.0021155411377549171, 0.001798786805011332, 0.0020387859549373388, 0.0020934704225510359, 0.0017162994481623173, 0.0018783793784677982, 0.0025103678926825523, 0.0027484649326652288, 0.0020016650669276714, 0.0022721432615071535, 0.0035586843732744455, 0.0024697838816791773, 0.0018137808656319976, 0.0029520115349441767, 0.0019776844419538975, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1506, 17, 3132, 3890, 3639, -2351, 4016, -1257, -2032, -701, 7892, -1672, 3347, 5843, 1865, 1912, -831, -608, -1920, 6075, 2043, -762, 2076, -982, -1127, 3612, 1261, 2056, 3617, 2040, 4785, 1558, 1125, 5377, 3435, 2657, -568, 3234, 2018, -3966, -103, 1445, 155, 1400, -1111, 463, -1285, 1026, -8129, 2030, 925, -2335, 7029, -1146, 2208, 1177, 1248, 2109, -615, -1871, 401, 1522, 244, 4262, 4525, 2765, 3021, 5363, 4157, -609, 2899, 6369, 2682, -1263, 3422, 6240, 877, -4434, 498, 1580, 7213, 2081, -427, -1176, 1400, 735, 1880, -1659, 3767, -278, 3608, 1565, 16, -2839, 0, 1458, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0001329240039922297, 0.00031873930129222572, 0.00019170175073668361, 0.00019405757484491915, 0.00016943953232839704, 0.0001698342093732208, 0.00014641316374763846, 0.00021713224123232067, 0.00019572458404581994, 0.0002298969920957461, 8.6663778347428888e-05, 0.00025201632524840534, 0.00016125787806231529, 0.00010318296699551865, 0.00016032847634050995, 0.00022751640062779188, 0.00019987791893072426, 0.00016538021736778319, 0.00016578304348513484, 9.9134529591538012e-05, 0.00020691625832114369, 0.00018255884060636163, 0.00015720512601546943, 0.00017879984807223082, 0.00020806364773306996, 0.00016765060718171299, 0.00021532083337660879, 0.00018209624977316707, 0.00019412886467762291, 0.00019748961494769901, 0.00010642861161613837, 0.0001715736580081284, 0.00025126439868472517, 0.00011001813254551962, 0.00016109875286929309, 0.00018046422337647527, 0.00016159978986252099, 0.00015578810416627675, 0.00015666631225030869, 0.00013482992653734982, 0.00018379098037257791, 0.00017002274398691952, 0.00023763609351590276, 0.00022472694399766624, 0.00018947888747788966, 0.0001899897470138967, 0.00019653771596495062, 0.00017646759806666523, 8.8964698079507798e-05, 0.00013460931950248778, 0.00023170952044893056, 0.00017602792649995536, 0.00011066439037676901, 0.00018023175653070211, 0.0001694189413683489, 0.00020918193331453949, 0.00018068439385388047, 0.00018445331079419702, 0.0002100152923958376, 0.0001343966432614252, 0.00024326681159436703, 0.00017020560335367918, 0.00025449556414969265, 0.0001547084393678233, 0.00014492643822450191, 0.00016653361672069877, 0.00012352025078143924, 0.00013942233636043966, 0.00015482278831768781, 0.00023278038133867085, 0.00016597617650404572, 0.00011386223195586354, 0.00016669779142830521, 0.00018253055168315768, 0.00021076240227557719, 0.00012730600428767502, 0.0001376541331410408, 0.00014303000352811068, 0.00020812629372812808, 0.00013495450548361987, 0.0001238780387211591, 0.00014418853970710188, 0.00017634456162340939, 0.00023486248392146081, 0.00015385680308099836, 0.00016802138998173177, 0.0001660666021052748, 0.00018801262194756418, 0.00017515329818706959, 0.00018076781998388469, 0.00016534193127881736, 0.00016742570733185858, 0.00019486880046315491, 0.00015622643695678562, 0.00023524307471234351, 0.00021705760445911437, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -16,98,-70,27,55,-20,89,59,-67,9,33,-81,80,127,-61,26, 
  /* [1][0][][] */ -23,10,-51,-16,-13,48,29,-127,14,-61,-26,-59,-15,-45,-62,0, 
  /* [2][0][][] */ -17,-30,21,88,23,40,-99,127,-9,-3,58,-56,-27,-72,-31,46, 
  /* [3][0][][] */ 92,-104,96,-12,3,-27,-37,127,-44,70,79,61,-6,75,5,25, 
  /* [4][0][][] */ -47,-16,9,36,-70,26,-20,-127,-1,5,35,-12,33,56,89,113, 
  /* [5][0][][] */ 127,22,-39,2,-79,5,24,78,28,-27,42,62,107,14,-70,-11, 
  /* [6][0][][] */ 9,-34,-51,-54,-73,5,-2,-59,-57,-51,-26,25,82,61,127,-1, 
  /* [7][0][][] */ -51,33,-26,-69,-2,-54,-76,10,-101,47,-64,-53,-127,-35,13,100, 
  /* [8][0][][] */ 53,41,76,12,55,23,69,9,71,-31,37,4,-127,-31,-72,6, 
  /* [9][0][][] */ -35,57,32,-39,-26,-11,29,-14,-36,47,-38,17,44,127,17,30, 
  /* [10][0][][] */ 113,42,-82,56,-41,-19,54,-52,-74,-53,-54,-118,-127,-93,23,113, 
  /* [11][0][][] */ 30,-1,64,-8,-5,-22,11,73,-97,32,-15,14,-13,4,45,127, 
  /* [12][0][][] */ -57,-17,27,-14,37,15,105,19,-62,33,11,-7,-2,82,-54,127, 
  /* [13][0][][] */ -6,39,21,57,127,38,115,107,-19,120,-87,-55,15,88,-94,-38, 
  /* [14][0][][] */ -127,120,13,-20,7,2,56,-14,-39,36,118,-8,-89,23,-53,63, 
  /* [15][0][][] */ -12,-18,-127,-37,73,-41,-72,-27,-16,-22,-16,-60,-7,-82,-43,36, 
  /* [16][0][][] */ 124,-25,-6,-6,24,-55,52,-20,-24,4,127,44,41,-18,-18,16, 
  /* [17][0][][] */ 28,29,-43,-111,-16,-80,127,-124,8,-41,-54,32,41,73,20,39, 
  /* [18][0][][] */ 39,116,-21,-40,53,-97,-32,-55,-27,127,-34,-15,-39,47,-1,-41, 
  /* [19][0][][] */ -78,-109,127,-104,54,-99,35,-55,32,59,100,107,37,6,51,-13, 
  /* [20][0][][] */ -20,92,69,1,9,1,21,-34,59,-3,102,-23,-127,-21,-77,1, 
  /* [21][0][][] */ -62,35,49,17,55,35,70,26,-127,63,-48,24,-35,36,-69,-20, 
  /* [22][0][][] */ 15,-95,51,19,21,-127,105,-3,17,-57,-46,-92,35,-77,-53,-49, 
  /* [23][0][][] */ -57,-103,42,70,33,-34,21,-54,37,-59,84,-9,-1,65,101,127, 
  /* [24][0][][] */ 2,-4,28,102,36,12,-68,-127,62,8,-56,8,-10,-1,-20,-26, 
  /* [25][0][][] */ 1,45,-2,-47,-38,-20,7,-17,-22,46,-50,-19,37,127,43,-10, 
  /* [26][0][][] */ -69,81,14,14,32,-74,-8,-42,7,27,17,73,12,14,-84,127, 
  /* [27][0][][] */ -16,-127,-64,13,-70,96,-2,-49,19,-49,56,-35,22,-55,-101,-30, 
  /* [28][0][][] */ -32,1,41,68,28,10,-36,-127,-107,49,97,-10,66,13,-45,-12, 
  /* [29][0][][] */ -127,111,-16,-40,-21,31,-118,-85,-49,-24,5,-2,17,-48,-113,76, 
  /* [30][0][][] */ 44,71,-42,66,-107,-89,-71,-35,-47,5,12,-109,127,38,-17,108, 
  /* [31][0][][] */ 127,21,-69,-16,-73,10,87,54,-44,-32,53,27,24,5,-13,-9, 
  /* [32][0][][] */ -25,-19,127,9,-34,73,73,22,-30,-15,-11,15,1,70,60,52, 
  /* [33][0][][] */ 3,34,-78,-44,-28,22,127,44,-9,-22,26,-68,91,114,-45,45, 
  /* [34][0][][] */ -75,-28,100,18,28,-47,88,-37,-127,38,31,-27,41,67,-55,-22, 
  /* [35][0][][] */ -9,16,-29,3,-60,115,-29,-40,-18,127,5,87,-57,73,9,52, 
  /* [36][0][][] */ -8,-87,127,-45,-59,10,-42,3,26,16,-57,86,-4,-95,-28,39, 
  /* [37][0][][] */ 99,-19,56,-12,104,-89,-45,51,-37,125,-78,-7,-94,-57,127,-17, 
  /* [38][0][][] */ 47,38,19,-98,-2,-51,-97,64,-78,48,-85,-63,-72,-127,-116,67, 
  /* [39][0][][] */ -58,32,-68,-47,-84,-66,55,24,-127,-43,20,77,44,5,8,39, 
  /* [40][0][][] */ 127,18,3,-90,-84,22,15,-23,-23,-38,-42,-93,20,56,41,23, 
  /* [41][0][][] */ 102,-77,-52,-45,-8,-4,-65,-15,62,-37,-2,-62,127,-74,67,-38, 
  /* [42][0][][] */ -6,-80,-59,127,-9,-82,-109,30,16,26,6,58,-66,70,-53,-8, 
  /* [43][0][][] */ -82,-40,-59,-113,-53,-5,6,83,47,-127,-46,31,-20,-56,-16,73, 
  /* [44][0][][] */ -32,36,19,-40,-39,-56,24,127,125,-86,61,86,115,23,6,-9, 
  /* [45][0][][] */ 36,78,-73,83,127,-70,-39,-50,85,-72,62,-56,-30,11,-62,45, 
  /* [46][0][][] */ -30,-40,12,-25,97,-17,20,9,-14,127,-14,-109,42,70,-53,88, 
  /* [47][0][][] */ 81,-46,-40,-1,79,-26,-40,-47,3,127,-32,32,-16,-125,-69,4, 
  /* [48][0][][] */ 17,19,-35,-104,-12,-63,127,-120,-2,1,-50,47,55,60,0,47, 
  /* [49][0][][] */ -26,127,-79,29,61,-54,70,57,-19,21,53,-93,-22,82,127,-107, 
  /* [50][0][][] */ 13,52,-14,-6,-127,7,-74,-68,53,76,33,31,-36,-44,-6,42, 
  /* [51][0][][] */ 127,-34,-51,4,-48,98,-97,-44,45,-18,-43,62,-42,-57,-9,42, 
  /* [52][0][][] */ -28,-53,32,48,-54,-94,-127,3,-44,-46,-12,-61,32,-58,6,98, 
  /* [53][0][][] */ 20,90,49,-118,19,98,84,-28,-3,-15,-21,-39,75,-127,5,54, 
  /* [54][0][][] */ 41,121,-9,-10,-28,-119,-127,82,19,-34,-51,127,94,95,32,64, 
  /* [55][0][][] */ -43,-17,51,15,56,-21,84,73,-78,-1,23,15,127,51,-8,12, 
  /* [56][0][][] */ 127,8,18,48,-60,103,-58,-54,-21,41,-89,-9,-67,97,-7,25, 
  /* [57][0][][] */ -44,-25,-33,-30,-63,-74,57,-30,-127,-22,54,54,16,44,-9,66, 
  /* [58][0][][] */ 43,-57,61,24,7,-67,-17,4,31,-15,-127,-23,23,-40,-35,45, 
  /* [59][0][][] */ 81,14,-127,89,18,50,80,-2,-82,-52,32,-94,-91,-61,22,99, 
  /* [60][0][][] */ -7,20,-12,28,-14,-22,-14,7,-28,-71,50,112,-55,-127,-24,-15, 
  /* [61][0][][] */ -39,19,94,-97,-53,63,3,89,-21,-78,54,67,86,7,-2,127, 
  /* [62][0][][] */ 73,40,9,-127,-15,16,-2,-50,-15,47,-36,52,28,-9,-94,-65, 
  /* [63][0][][] */ -1,-31,6,-7,-64,-69,-65,-2,-75,-12,-34,-20,127,6,60,-9, 
  /* [64][0][][] */ 17,14,1,42,-88,-23,-16,-105,55,127,42,2,35,-38,-47,118, 
  /* [65][0][][] */ -36,11,-1,-25,-65,78,20,-40,44,-97,98,-55,70,70,-127,72, 
  /* [66][0][][] */ -122,97,-98,-83,32,-48,-113,-64,-103,108,87,-5,-127,-68,52,43, 
  /* [67][0][][] */ 5,-27,-127,-109,72,83,-1,-22,-22,-6,41,-19,20,28,30,36, 
  /* [68][0][][] */ 46,23,4,-56,-52,48,12,19,-66,74,125,-10,-1,-36,-127,16, 
  /* [69][0][][] */ 77,-119,78,-57,30,-111,-38,127,-7,79,99,98,-19,96,-40,8, 
  /* [70][0][][] */ 38,16,127,27,100,1,115,2,27,28,-53,42,-63,68,-74,46, 
  /* [71][0][][] */ 10,27,87,-67,-127,-85,9,20,-16,-14,15,-98,-73,-1,18,13, 
  /* [72][0][][] */ -60,-87,36,-127,79,0,5,24,-70,20,-116,-8,58,120,-63,127, 
  /* [73][0][][] */ 21,17,41,-5,117,-81,-37,4,-20,89,-76,31,-66,-54,127,-14, 
  /* [74][0][][] */ -80,-3,-127,-54,52,-42,-36,41,-59,-5,-102,-32,-31,-71,-21,54, 
  /* [75][0][][] */ 83,-18,53,-43,24,15,-127,-30,-9,-85,65,7,5,-11,-10,-7, 
  /* [76][0][][] */ 7,-48,-42,114,19,83,97,-39,51,-127,70,103,37,-79,-60,48, 
  /* [77][0][][] */ -37,-46,127,-16,42,-26,-31,-102,5,18,30,99,48,54,7,-1, 
  /* [78][0][][] */ -50,5,7,-43,9,-57,50,-4,23,-15,14,-79,-109,-86,-127,-64, 
  /* [79][0][][] */ -109,-76,-10,13,127,58,-19,2,16,44,-9,58,-35,-59,-82,-2, 
  /* [80][0][][] */ 17,-93,18,127,-29,-30,-99,105,10,9,43,-7,-87,-31,12,19, 
  /* [81][0][][] */ 113,72,-19,81,9,41,25,125,35,16,127,60,120,29,71,-26, 
  /* [82][0][][] */ -63,2,17,-26,29,-127,-113,-86,6,89,-47,-33,-28,89,-69,-23, 
  /* [83][0][][] */ 68,-30,97,-20,-44,8,-127,-14,23,-87,19,-46,-17,9,-9,-23, 
  /* [84][0][][] */ 19,-78,-102,44,116,32,36,51,-127,7,-120,-38,51,-52,-74,11, 
  /* [85][0][][] */ 18,101,38,-39,97,-14,52,-87,127,-60,43,-12,87,-103,23,-7, 
  /* [86][0][][] */ 127,-30,126,55,3,-43,76,44,-53,-62,-110,-58,32,8,-54,3, 
  /* [87][0][][] */ -8,18,9,-83,85,-25,-16,25,27,-35,85,-32,-75,-127,-8,27, 
  /* [88][0][][] */ -55,-31,28,8,11,30,-55,-31,-3,6,-72,-127,-57,-38,-18,-20, 
  /* [89][0][][] */ -74,8,17,-58,13,0,-127,33,77,21,-70,-6,-12,-85,-39,-23, 
  /* [90][0][][] */ -15,-14,-25,-89,127,32,-60,29,35,64,34,-11,39,27,-71,-10, 
  /* [91][0][][] */ -31,-68,2,72,-58,-1,-26,127,-40,-87,12,-68,15,67,45,122, 
  /* [92][0][][] */ -35,76,19,-18,-10,60,-87,38,-39,-1,65,2,-38,127,40,29, 
  /* [93][0][][] */ 2,71,-47,-53,53,88,-90,18,57,58,63,55,-127,33,-42,78, 
  /* [94][0][][] */ 22,64,102,4,-127,-33,15,-20,34,-24,26,-8,-57,-23,16,-42, 
  /* [95][0][][] */ -1,39,18,13,90,-21,-91,91,14,20,-88,74,1,12,127,-38, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015321741811931133, 0.0036740102805197239, 0.0022096873726695776, 0.0022368421778082848, 0.0019530775025486946, 0.0019576267804950476, 0.0016876596491783857, 0.00250281672924757, 0.0022560572251677513, 0.0026499521918594837, 0.00099894683808088303, 0.0029049147851765156, 0.0018587700324133039, 0.0011893584160134196, 0.0018480571452528238, 0.0026225117035210133, 0.0023039313964545727, 0.0019062870414927602, 0.0019109302666038275, 0.0011426933342590928, 0.0023850603029131889, 0.0021042998414486647, 0.0018120553577318788, 0.0020609709899872541, 0.0023982857819646597, 0.0019324570894241333, 0.002481937175616622, 0.0020989675540477037, 0.0022376638371497393, 0.0022764021996408701, 0.0012267699930816889, 0.0019776769913733006, 0.0028962476644665003, 0.0012681452790275216, 0.0018569359090179205, 0.0020801557693630457, 0.0018627111567184329, 0.0017957217060029507, 0.00180584448389709, 0.0015541432658210397, 0.0021185022778809071, 0.0019598000217229128, 0.00273915845900774, 0.0025903584901243448, 0.0021840650588274002, 0.0021899535786360502, 0.0022654300555586815, 0.002034087898209691, 0.001025468809530139, 0.0015516002895310521, 0.0026708445511758327, 0.0020290198735892773, 0.0012755944626405835, 0.0020774761214852333, 0.0019528402481228113, 0.0024111759848892689, 0.0020826936233788729, 0.0021261367946863174, 0.0024207818787544966, 0.0015491489320993423, 0.0028040618635714054, 0.0019619078375399113, 0.0029334921855479479, 0.0017832767916843295, 0.00167052261531353, 0.0019195819040760398, 0.001423780107870698, 0.0016070784768089652, 0.0017845948459580541, 0.0026831880677491426, 0.001913156476803124, 0.0013124550459906459, 0.0019214743515476584, 0.0021039736457169056, 0.0024293935857713223, 0.0014674172271043062, 0.0015866969479247928, 0.0016486629610881209, 0.002399008022621274, 0.0015555792488157749, 0.001427904237061739, 0.0016620170790702105, 0.0020326697267591953, 0.0027071877848356962, 0.0017734601860865951, 0.0019367310451343656, 0.0019141988595947623, 0.0021671638824045658, 0.0020189383067190647, 0.0020836552139371634, 0.0019058457110077143, 0.0019298647530376911, 0.0022461928892880678, 0.0018007742473855615, 0.0027115747798234224, 0.002501956420019269, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 11747, 10808, -5829, 3286, 233, 6451, -58, 5574, 19905, -6192, -8506, 9545, -17272, 6638, 5070, 8956, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.7555527746444568e-05, 7.6369906309992075e-05, 6.6480140958447009e-05, 6.1181410274002701e-05, 6.960592872928828e-05, 7.9464669397566468e-05, 5.075166336609982e-05, 6.949851376703009e-05, 0.00010971364827128127, 8.2058490079361945e-05, 6.3480489188805223e-05, 4.6075612772256136e-05, 7.5500945968087763e-05, 7.7632757893297821e-05, 0.00010276347893523052, 8.366805559489876e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -102,38,24,-28,-29,-7,-53,-39,-68,10,-3,-33,21,32,31,-33,31,4,74,5,17,-48,127,61,45,21,15,25,-60,-90,-88,10,-26,-30,27,16,3,32,-9,30,-21,7,-80,27,-68,-38,9,77,-34,-7,-59,4,-12,35,26,-45,-84,24,-23,71,34,22,11,1,-32,-73,-45,40,-45,-37,25,-9,-9,-7,-69,-31,-38,28,-65,-23,-54,71,67,-81,-6,29,20,61,42,-7,-1,-19,-41,-30,-67,1, 
  /* [1][0][][] */ 50,18,35,-46,-64,-30,0,31,-28,39,50,-49,1,-15,-61,-44,-14,12,-64,23,7,-80,5,38,-27,-57,7,-32,60,-93,123,-61,52,15,-24,52,27,71,-5,-40,44,8,16,-20,15,57,-127,-36,-40,-47,-9,-40,48,-33,-28,58,21,6,-33,16,26,53,-14,-90,5,-17,-46,-10,6,-10,-92,-16,-41,-23,17,-85,11,10,39,-71,-21,-20,-79,-36,47,-26,-26,15,-70,3,-58,50,27,43,-48,45, 
  /* [2][0][][] */ 82,-38,49,28,-12,-78,53,33,8,-14,-20,0,-63,-18,30,-28,-108,-58,-29,53,-5,-50,-59,29,-11,-64,-13,-10,-17,37,-53,127,-66,112,-27,31,-7,-26,-1,-13,-84,72,75,-2,-61,22,-32,-8,45,33,-12,-61,55,-50,-12,63,21,-35,49,-3,21,34,-40,24,65,35,11,-17,23,24,-52,-4,50,54,66,16,35,-85,92,81,98,-13,-29,40,-43,49,15,53,0,9,-23,29,-35,38,-7,42, 
  /* [3][0][][] */ -16,-13,-36,-3,27,-11,17,-89,-37,64,48,74,27,-6,-61,42,18,-47,29,12,12,127,46,-34,26,30,-15,-1,73,-26,66,-10,-8,52,-16,-27,34,69,32,0,-83,-32,-47,55,-44,21,44,-6,-28,-62,-16,-11,45,-65,-34,-50,10,90,-35,4,-7,-10,-30,-2,15,42,-36,0,-38,10,26,-67,-44,-54,37,-2,15,3,-51,-59,-26,-13,-72,8,-21,-55,30,-26,17,35,35,-9,50,32,-47,61, 
  /* [4][0][][] */ 49,10,-36,12,14,34,-68,0,-18,76,101,-9,-5,-10,-4,-54,10,-2,-27,52,12,-47,53,78,-78,11,-127,23,-45,-78,-5,12,-72,-43,23,63,16,38,16,31,-39,-53,32,-31,2,9,-34,63,-36,56,16,12,40,-18,-78,21,44,-26,10,0,49,-12,21,11,-57,23,-45,1,-35,11,-49,71,56,-66,-38,-68,24,-49,-3,22,-58,92,-72,20,-35,34,14,-67,49,4,19,10,-45,-26,32,31, 
  /* [5][0][][] */ -78,36,81,0,22,-30,50,-10,3,36,-21,-14,29,-16,-2,-46,-14,-52,50,35,-117,-16,-86,43,-51,-17,31,-5,46,-86,-5,34,57,114,-4,33,5,6,61,-16,-17,94,69,-36,8,78,40,-8,8,24,-27,17,24,-57,16,-101,24,-73,-56,-64,77,113,-61,-18,78,-25,-58,-74,-72,-41,-72,-15,-18,19,-25,-40,13,-67,-1,0,127,-22,20,-73,-85,44,44,-8,-66,24,23,-11,-6,26,15,95, 
  /* [6][0][][] */ 44,-23,-77,40,-32,-109,82,107,-70,64,-28,44,-127,-72,72,55,-10,-65,-9,-1,-2,-12,-68,-72,-77,28,69,47,25,16,106,-68,17,-4,17,-63,-4,6,53,71,21,10,-37,-37,18,-41,-84,27,51,-92,-15,55,40,17,-22,-59,67,52,8,-10,-96,42,-90,-2,38,7,8,43,57,-11,5,-51,-20,30,95,21,80,-28,60,-53,-12,-41,-68,53,21,-76,34,13,-38,62,33,17,-25,8,-21,112, 
  /* [7][0][][] */ 18,84,-67,-60,9,-15,44,-17,-76,18,-40,-64,-32,16,1,-14,-49,-41,-37,53,2,127,20,31,4,-5,25,31,42,57,71,-32,82,33,-29,3,-3,-3,-12,29,-78,5,15,-43,10,-53,85,-19,27,-86,-92,-13,-65,25,-6,-4,35,44,-103,3,-30,91,24,-34,-35,-15,-65,28,-30,5,-78,27,11,59,-30,53,-44,64,-28,-93,-34,-54,52,-91,38,-30,-11,0,-4,60,-75,36,46,-24,-47,9, 
  /* [8][0][][] */ -16,85,-66,33,-8,-25,-80,2,-108,-32,12,-1,-47,18,26,92,17,-40,-3,13,43,-8,13,-9,-30,76,12,20,-15,-9,-37,-32,-10,-44,-32,-79,-53,43,35,-3,-11,-25,30,34,-44,-62,9,-19,-32,-43,33,88,-11,-1,-77,101,-20,60,1,-38,-60,16,25,51,-42,-86,-54,1,-34,37,7,17,-22,-62,-117,-10,-45,45,-90,-74,-40,-1,-50,-44,-20,-21,33,34,23,58,-65,-4,-101,-127,12,-62, 
  /* [9][0][][] */ -9,14,-47,60,-67,-41,62,80,-1,45,-32,108,-22,-3,38,127,7,2,86,21,15,19,20,-97,-43,1,13,-3,20,-28,36,59,-41,0,1,-106,34,-33,-10,-16,-4,9,39,-42,-11,22,13,19,46,109,42,-21,-42,-96,3,-3,-19,-34,69,-12,-46,57,-62,-23,82,10,-9,-3,-85,1,33,25,-12,95,-23,-35,-30,1,-19,16,59,-28,62,11,40,2,-20,-41,-67,22,1,-1,75,19,-36,6, 
  /* [10][0][][] */ 76,-2,-21,8,-56,-30,64,30,29,-29,-31,-3,-80,-7,16,-9,-82,-36,30,22,37,44,11,4,-49,82,28,-4,-53,-89,-28,-9,58,-42,39,11,78,-100,90,127,25,-65,9,-8,-19,-72,-12,59,47,95,-57,-60,-4,6,7,45,6,-82,75,48,9,49,-67,-17,5,-39,21,38,12,-44,-25,30,124,42,21,-85,17,-65,74,17,-50,29,36,39,-26,17,3,35,-61,-23,26,52,52,57,-21,20, 
  /* [11][0][][] */ -49,-33,81,-69,-8,-25,-35,-30,71,-45,-11,9,-5,1,28,-1,-73,-3,59,17,-62,23,-89,-87,4,27,-62,52,39,-47,40,-46,5,2,28,-29,-65,-2,-120,13,-73,66,-53,55,14,16,-11,-51,42,-43,-65,-63,38,24,82,-83,-39,-93,12,-62,-31,-57,-50,-122,15,-60,67,77,127,14,59,-24,-46,-21,83,-54,93,20,41,74,38,-3,-9,117,89,24,-1,-28,-101,-80,-26,40,79,44,58,76, 
  /* [12][0][][] */ 48,-31,19,-30,12,112,-12,62,58,52,-12,63,31,55,36,-5,-74,45,19,54,123,11,60,-73,29,20,-84,-64,-29,67,5,11,18,-17,6,-41,51,-18,-18,-35,36,-32,52,35,-19,50,-3,-7,-50,32,15,10,-14,-43,4,16,-43,47,15,43,40,-95,0,-91,0,118,-10,-54,-17,-65,57,2,-5,18,-10,39,-10,29,-55,15,-23,31,127,26,3,94,-33,-74,61,6,-90,48,80,2,-6,-94, 
  /* [13][0][][] */ -2,28,13,-35,-60,-21,1,-1,30,-45,-45,-64,64,-94,-25,-66,-30,-37,-72,-6,-97,-27,3,99,-38,4,83,12,24,-42,57,57,4,-5,-115,111,-16,-70,52,-57,127,-9,11,10,1,-67,60,-19,83,9,-24,7,32,-20,3,79,47,-87,-34,-12,73,40,-15,-81,9,61,-10,24,-82,-62,-94,-23,-64,41,-47,-102,-106,-10,65,113,-2,55,44,-70,79,67,26,-24,-28,-9,-18,7,-46,7,-6,3, 
  /* [14][0][][] */ -12,26,-97,-30,102,85,-72,-38,11,-40,76,-10,3,-35,-44,-69,-51,28,27,127,13,-27,2,11,8,33,-11,67,14,3,-21,12,74,9,-32,-9,-22,67,58,6,53,13,20,14,-21,-67,57,-44,13,-36,-24,-3,41,37,-32,26,27,80,-90,-12,-34,-59,-28,-104,2,-62,-44,11,-67,66,-2,38,-8,-38,-18,-30,52,4,-71,-56,32,6,-15,-30,-30,20,-1,-8,-17,69,67,21,-5,-33,-55,-72, 
  /* [15][0][][] */ -54,-44,69,-41,-21,-35,-42,-52,18,11,-13,64,8,-10,39,86,-119,-28,30,-71,13,-26,-24,-78,47,-6,33,-56,-66,-122,-69,33,-56,41,68,-99,-5,-59,46,-19,-11,-18,33,-34,8,28,59,107,-32,15,44,-69,-20,25,8,-59,-112,-48,106,7,2,27,-95,27,-50,25,7,4,48,-100,55,-38,69,-27,-37,-45,-3,-4,85,32,-14,66,64,53,18,16,-127,-1,-35,-58,-80,26,46,-37,-8,70, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024461098946630955, 0.0032457208726555109, 0.0028254059143364429, 0.0026002097874879837, 0.0029582518618553877, 0.0033772485330700874, 0.0021569456439465284, 0.0029536867514252663, 0.0046628299169242382, 0.0034874856937676668, 0.0026979206595569849, 0.0019582135137170553, 0.0032087902072817087, 0.00329939229413867, 0.0043674479238688946, 0.0035558922681957483, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -4989, -61, -3070, -7462, -3246, 3564, -3434, -2654, 452, -3408, 6339, -1567, 1901, 12935, 7242, -3087, 14329, 2041, -4398, 499, 757, -2209, 4612, -660, 141, -2856, 3471, -4153, -406, -9012, -5414, -888, 6782, -1948, -1887, 210, -1293, -1840, -1404, 5945, -1592, -866, -2516, -5155, 17624, 17625, 2509, 13452, -3897, 9581, 10183, -4356, -920, 2739, 673, 11170, 220, 879, 16922, 6838, 8397, 13781, 5948, -4002, 796, 856, -2112, 1087, -3127, -2132, 1742, 4462, 17131, 804, 1012, 7827, -1340, 3207, 7803, -2981, -907, 14265, -3256, 228, 17780, -351, -2987, -5137, 8024, -4869, 12727, 507, -993, 2966, -5258, -5334, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00017295256839133799, 0.00022827173233963549, 0.00012833774962928146, 0.00011162678856635466, 0.00025589359574951231, 0.00034788486664183438, 0.00031505123479291797, 0.00018800949328579009, 0.00027249645791016519, 0.00015207334945444018, 0.00013322597078513354, 0.00032772094709798694, 0.00023135729134082794, 0.0001045760654960759, 0.00014395841571968049, 0.00015522817557211965, 0.00011325822561047971, 0.00030406666337512434, 0.00016311563376802951, 0.0001131395110860467, 0.00018201830971520394, 0.00041572347981855273, 0.00024556054268032312, 0.00017740906332619488, 0.00066106306621804833, 0.00020481184765230864, 0.00026969367172569036, 0.00015205633826553822, 0.00024034499074332416, 7.9648787504993379e-05, 0.00033559970324859023, 0.00027384274289943278, 0.00024413615756202489, 0.00016022565250750631, 0.00026342840283177793, 0.00028159611974842846, 0.00018076333799399436, 0.000278324238024652, 0.0002886346192099154, 9.3237649707589298e-05, 0.00020515207143034786, 0.00021767837461084127, 0.00019649472960736603, 0.00011435739725129679, 6.4637402829248458e-05, 7.6916432590223849e-05, 0.00024318326904904097, 8.978381083579734e-05, 0.0001998358202399686, 0.00012132048141211271, 0.00012170190893812105, 0.0001192217823700048, 0.00015493929095100611, 0.00016821453755255789, 0.00022568012354895473, 0.00012536474969238043, 0.00021323200780898333, 0.00024878952535800636, 0.00014594114327337593, 0.00014439756341744214, 0.00015341925609391183, 0.00012976207653991878, 0.00012950820382684469, 0.00014895193453412503, 0.00014944071881473064, 0.00044771769898943603, 0.00034221704117953777, 0.0002173491520807147, 0.00025094475131481886, 0.00024704818497411907, 0.00022337360132951289, 0.00016950776625890285, 0.00010276319517288357, 0.00019420025637373328, 0.00028463205671869218, 0.00014595373068004847, 0.00013845386274624616, 0.00022909326071385294, 0.0001835839357227087, 0.00021603649656753987, 0.00020159191626589745, 8.3215891208965331e-05, 0.00031584288808517158, 0.00017617750563658774, 8.4106490248814225e-05, 0.00023149052867665887, 0.00017323756765108556, 0.00015764751879032701, 0.0002302108914591372, 0.00019527818949427456, 9.1529691417235881e-05, 0.00043696007924154401, 0.00025560637004673481, 0.00020957569358870387, 0.00012877788685727865, 0.00023160215641837567, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 47,97,18,14,-18,3,49,36,43,-75,-127,63,-21,-17,12,-78,-85,22,41,-4,46,54,61,80,22,-15,-52,18,-20,51,35,-12,-40,5,-33,77,30,63,9,-37,30,-42,27,30,-99,-49,-6,-36,-6,-39,-29,-9,20,41,-36,-1,-63,-79,-91,-127,-127,-37,-83,-12,-25,29,24,-21,-31,36,44,-7,-37,16,35,0,-4,-61,-99,62,41,-96,73,-2,-92,-45,-33,40,-127,17,-97,27,72,-22,76,31, -31,-27,-15,97,5,73,-10,11,60,30,-81,106,-47,-73,-63,120,-117,52,67,51,127,3,95,127,27,32,0,34,6,127,12,-127,77,88,8,66,95,127,-20,-127,127,-16,127,108,-37,-110,127,-43,-17,-88,-51,-58,19,127,-41,-127,3,28,-99,-62,-52,-127,-63,58,-28,74,71,-23,-8,127,127,-11,-85,17,-43,-127,69,-68,-46,127,-9,-40,127,-48,-86,-61,61,105,97,88,-127,1,127,-50,127,62, 54,-89,16,15,1,-11,-6,38,14,58,-98,55,-11,17,61,-87,-47,20,-1,3,20,42,45,96,32,-67,22,19,10,61,9,-21,-35,-92,-42,75,22,-1,23,-26,-1,30,-6,116,-52,-5,-8,-31,43,-54,53,12,27,-22,10,-7,52,-84,-48,-77,-73,-8,-84,-5,38,20,-58,11,-34,18,17,-28,-3,-63,-27,4,28,-38,-82,56,-28,-77,37,-5,-22,-24,-3,32,-101,22,-28,38,41,27,47,12, 
  /* [0][1][][] */ 103,-18,55,127,6,-48,127,32,-26,-110,-55,127,-11,-127,-84,14,-29,-42,65,18,-116,0,-127,-125,-4,40,-127,127,-61,76,127,91,51,76,16,104,-127,91,-11,-48,53,-127,45,89,-127,-127,-15,-98,-65,-78,-119,25,127,-68,62,-35,-127,-9,-73,9,-66,-74,-26,33,-125,-26,100,-78,-33,17,-47,-127,-127,67,127,-56,117,81,-24,-49,127,-93,-18,125,-61,-7,2,106,-24,13,-61,11,-19,-104,76,19, -127,27,-96,114,-102,-127,-126,-127,53,30,67,34,-114,-99,-57,127,-127,-127,127,127,20,-127,-114,113,-127,127,-1,62,-53,-52,-72,103,-127,126,127,-64,-14,99,127,-73,-47,40,36,51,3,-51,-91,-127,-8,-127,-127,107,61,51,51,-46,16,35,117,-7,-15,-33,-127,127,-17,-127,127,127,37,34,-123,-87,-28,64,-108,-86,127,127,127,-75,-81,8,-75,76,-1,-84,127,127,111,127,-95,-127,-73,-74,49,127, 74,4,95,87,16,-25,17,41,-38,127,-45,59,-2,-30,-127,42,7,-31,3,-9,-117,9,-90,-121,12,-15,110,-14,127,72,35,-93,0,-127,-12,127,-119,19,-22,-74,-2,110,33,127,-45,-69,-23,-73,127,-101,-24,9,43,-62,-127,15,75,-11,-127,38,-16,-50,-8,48,127,-27,-75,9,-49,10,-33,-80,-94,-127,-3,-38,28,-39,-72,-14,-89,-127,-11,127,-98,7,11,16,-43,-20,-34,41,-12,127,21,4, 
  /* [0][2][][] */ 60,-127,71,-13,24,17,48,72,-36,-54,22,-27,3,-24,6,-3,-24,8,-57,61,-14,40,-13,-64,41,40,-26,31,-37,81,17,52,-17,-10,-23,-17,54,46,0,-19,13,19,-2,-55,-67,-90,-27,17,0,46,-35,58,-41,-24,-35,-34,-13,-2,-21,30,-1,-16,50,-37,-29,38,34,-24,30,14,10,57,-68,24,16,30,-62,-34,-38,0,39,-44,-5,-16,-124,49,-31,0,-115,30,23,9,-34,-17,6,-13, -54,25,127,-4,127,51,-21,39,-127,41,-19,-85,127,-31,-55,19,-13,46,-6,-20,11,27,26,56,63,-40,-23,16,-15,89,-2,55,-21,43,17,-73,61,96,21,-48,-5,12,-120,20,-15,-32,-42,-82,2,-22,-66,127,93,-98,-10,-68,-9,127,-35,3,17,-77,109,21,-26,1,17,24,127,16,-5,91,-125,32,-38,-22,-11,-77,-19,-41,3,-32,-27,-78,-49,127,36,40,80,14,64,13,-33,-37,5,-2, 40,67,30,17,52,-12,7,86,3,47,-2,-28,-4,-43,12,21,-32,5,-43,64,-26,47,-30,-64,20,47,-14,15,-5,47,-5,-73,-68,-26,-11,-33,72,33,11,-26,25,-2,20,-33,-96,-48,-19,-1,52,58,-11,15,-27,-29,11,-9,-18,-2,-9,20,-49,-5,57,-29,42,32,-89,5,20,33,5,53,-53,-55,-31,11,-34,-41,-63,15,-17,-35,0,3,-127,38,-39,10,-117,52,12,10,-22,-9,3,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0073504839092493057, 0.0097015481442213058, 0.0054543539881706238, 0.0047441385686397552, 0.010875477455556393, 0.014785106293857098, 0.013389677740633488, 0.0079904031008481979, 0.011581099592149258, 0.0064631169661879539, 0.0056621036492288113, 0.013928140513598919, 0.0098326848819851875, 0.0044444827362895012, 0.0061182323843240738, 0.0065971971489489079, 0.004813474602997303, 0.012922832742333412, 0.0069324146024882793, 0.0048084291629493237, 0.0077357781119644642, 0.017668247222900391, 0.010436323471367359, 0.0075398851186037064, 0.028095180168747902, 0.0087045030668377876, 0.011461980640888214, 0.0064623942598700523, 0.010214662179350853, 0.003385073272511363, 0.014262987300753593, 0.011638316325843334, 0.010375786572694778, 0.0068095903843641281, 0.011195707134902477, 0.011967835016548634, 0.007682441733777523, 0.011828780174255371, 0.012266971170902252, 0.0039626001380383968, 0.0087189627811312675, 0.0092513309791684151, 0.0083510261029005051, 0.0048601892776787281, 0.0027470896020531654, 0.0032689482904970646, 0.010335288941860199, 0.0038158118259161711, 0.0084930220618844032, 0.0051561202853918076, 0.0051723308861255646, 0.0050669256597757339, 0.006584919523447752, 0.0071491175331175327, 0.0095914052799344063, 0.0053280014544725418, 0.0090623600408434868, 0.010573554784059525, 0.0062024984508752823, 0.006136896088719368, 0.0065203183330595493, 0.0055148880928754807, 0.0055040987208485603, 0.0063304570503532887, 0.0063512302003800869, 0.019028002396225929, 0.014544224366545677, 0.0092373387888073921, 0.010665151290595531, 0.01049954816699028, 0.0094933779910206795, 0.0072040800005197525, 0.0043674358166754246, 0.0082535110414028168, 0.012096862308681011, 0.0062030334956943989, 0.0058842888101935387, 0.0097364634275436401, 0.0078023169189691544, 0.0091815507039427757, 0.0085676563903689384, 0.0035366753581911325, 0.013423322699964046, 0.0074875438585877419, 0.0035745257046073675, 0.0098383473232388496, 0.0073625962249934673, 0.0067000193521380424, 0.0097839627414941788, 0.0082993227988481522, 0.0038900116924196482, 0.018570803105831146, 0.010863270610570908, 0.008906967006623745, 0.005473060067743063, 0.0098430914804339409, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 6088, 2688, 687, -534, 4358, 5338, 8447, 766, -133, 7154, 824, -3851, 3666, 2031, 205, -191, 1892, 7262, -233, 349, 3998, 11350, 7458, -1042, -3142, -484, 6801, -88, 1246, 968, 5964, -1159, 6896, 2157, 3464, -2741, 661, -4180, 199, 1464, 2100, 743, 1278, -668, 441, 1870, 2680, 3382, 2558, 2321, 4387, 1823, -1888, 1322, 729, 1440, 1372, 1715, 6301, 1041, -568, 3036, 2108, 3613, 3442, 8158, -4566, 1964, 4353, -650, 3602, 1229, 3189, 1883, 3284, 1856, -497, 2325, 1697, 2148, 1664, 2124, 4188, 296, 2965, 3828, 309, -897, 18543, -296, 606, -1267, 8995, 2527, -156, -856, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00012090634845662862, 0.00014264056517276913, 0.00022459449246525764, 0.00027814670465886593, 0.00017417024355381727, 0.00014174506941344589, 0.00010513231973163784, 0.00026235263794660568, 0.00021251228463370353, 0.00011098748655058444, 0.00026595537201501429, 0.00015121781325433403, 0.00015357244410552084, 0.00021366744476836175, 0.00022278458345681429, 0.0002378362842136994, 0.00027194668655283749, 9.870912617770955e-05, 0.00014939333777874708, 0.00022563348466064781, 0.00014738620666321367, 8.2117447163909674e-05, 0.00011385189282009378, 0.00020250782836228609, 0.00019583987887017429, 0.00026093292399309576, 0.00013003112690057606, 0.00019111229630652815, 0.00021243027003947645, 0.00017403915990144014, 0.00014096213271841407, 0.00024083655443973839, 0.00012098516890546307, 0.0002312787837581709, 0.00021033048687968403, 0.00019812800746876746, 0.00020057227811776102, 0.00015020940918475389, 0.00019319204147905111, 0.00019920444174204022, 0.00020353592117317021, 0.00025552284205332398, 0.00025508235557936132, 0.00027162159676663578, 0.00032762967748567462, 0.00022778418497182429, 0.00022093682491686195, 0.00017276326252613217, 0.00022720989363733679, 0.00023224831966217607, 0.00017291052790824324, 0.0001934995234478265, 0.00019711336062755436, 0.00027536708512343466, 0.00026780235930345953, 0.00026339158648625016, 0.00024670650600455701, 0.00022127151896711439, 0.00013973828754387796, 0.00021155660215299577, 0.00027906088507734239, 0.00021596251463051885, 0.00024185547954402864, 0.00017521592963021249, 0.00017316128651145846, 0.00010508338891668245, 0.00013372168177738786, 0.00023580942070111632, 0.00014167511835694313, 0.00030217648600228131, 0.00017678514996077865, 0.00017918756930157542, 0.00014962629938963801, 0.0001846713712438941, 0.00016664981376379728, 0.00015166615776252002, 0.00019471338600851595, 0.00018117197032552212, 0.00024737144121900201, 0.0002194834960391745, 0.00025003522750921547, 0.00018840780830942094, 0.00017295032739639282, 0.00018798485689330846, 0.00015508847718592733, 0.00017709196254145354, 0.00022801061277277768, 0.00027869184850715101, 5.521730417967774e-05, 0.00024350434250663966, 0.00028158727218396962, 0.00016407182556577027, 9.4713956059422344e-05, 0.00017734001448843628, 0.00020888431754428893, 0.0001869515108410269, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -81,42,37,-41,-6,-62,-47,-42,86,2,11,-66,81,-110,-34,-127, 
  /* [1][0][][] */ -127,18,-70,-80,-113,37,-37,75,-57,-15,97,-19,-2,124,42,37, 
  /* [2][0][][] */ -68,-31,-73,-21,-5,-45,46,-72,-85,127,66,14,46,57,-46,119, 
  /* [3][0][][] */ -36,-63,13,-39,-62,13,-53,-127,1,12,30,-51,-68,-44,-90,-55, 
  /* [4][0][][] */ 92,30,-5,42,-83,-36,-127,79,-4,66,14,15,25,-7,-69,-80, 
  /* [5][0][][] */ -38,56,-85,-3,34,-50,-29,-70,113,5,-26,-48,8,-127,-95,-82, 
  /* [6][0][][] */ -8,-42,-61,41,-100,81,47,-40,-35,-43,127,-36,-14,8,-122,19, 
  /* [7][0][][] */ -54,127,103,-78,31,118,8,-58,37,78,-70,38,35,1,44,88, 
  /* [8][0][][] */ -30,19,43,-15,103,11,81,127,-74,-27,-65,-44,28,81,-61,-71, 
  /* [9][0][][] */ 20,46,99,6,-72,-52,-92,-105,65,-12,127,51,-13,-90,28,-10, 
  /* [10][0][][] */ -23,-92,21,-82,-95,83,46,23,-29,-51,2,27,4,50,-127,9, 
  /* [11][0][][] */ 72,-51,4,74,-85,-23,18,-6,124,108,-18,48,41,-70,-25,127, 
  /* [12][0][][] */ -44,-60,119,4,75,-9,25,62,74,-18,109,92,-28,31,-127,51, 
  /* [13][0][][] */ -11,-32,20,16,19,13,127,11,-88,11,7,3,-35,116,100,-70, 
  /* [14][0][][] */ 127,-100,98,-15,18,9,114,97,114,108,73,46,93,-37,36,-23, 
  /* [15][0][][] */ -11,102,8,-26,59,127,-49,53,-34,-22,-40,3,-26,90,-4,-51, 
  /* [16][0][][] */ -33,57,112,-40,14,35,5,-33,14,0,-27,27,85,-5,87,127, 
  /* [17][0][][] */ 46,127,95,-81,40,-45,-26,-69,-36,101,-56,92,-77,-19,112,-111, 
  /* [18][0][][] */ -102,-7,-104,-48,114,121,-32,-65,54,114,127,75,-29,127,-66,-7, 
  /* [19][0][][] */ 59,124,94,83,53,-59,-44,29,-49,124,69,127,73,72,-101,51, 
  /* [20][0][][] */ 127,15,-26,79,-67,28,-22,73,-66,-76,-123,-70,62,-27,38,-7, 
  /* [21][0][][] */ -71,-74,-20,107,-17,13,-127,73,7,-23,36,28,-21,23,-62,3, 
  /* [22][0][][] */ -6,-2,-66,-53,127,-3,-41,39,71,103,34,81,-55,-24,34,25, 
  /* [23][0][][] */ -74,12,-39,19,11,61,102,106,-42,127,-19,-23,-12,33,-60,-43, 
  /* [24][0][][] */ 55,-60,-2,35,127,35,64,-28,35,5,35,17,-88,8,-4,-14, 
  /* [25][0][][] */ 93,-41,74,4,35,-7,-19,86,82,-5,-42,12,127,-30,22,40, 
  /* [26][0][][] */ 56,22,103,85,65,-10,-49,-13,8,34,19,127,34,-37,25,-53, 
  /* [27][0][][] */ -45,48,-71,18,-27,105,-19,-65,-3,-89,127,23,41,-50,88,83, 
  /* [28][0][][] */ -13,34,-78,-127,20,-53,17,-69,-94,97,-66,51,-37,25,-7,39, 
  /* [29][0][][] */ 107,109,-82,69,45,91,-93,24,51,66,16,55,-127,19,-55,94, 
  /* [30][0][][] */ -41,61,-93,-51,52,-23,28,17,-44,61,-43,1,3,58,-6,127, 
  /* [31][0][][] */ 10,-127,114,39,52,-47,-81,2,22,-13,26,-17,-106,29,49,78, 
  /* [32][0][][] */ -54,65,5,37,-127,56,23,14,56,-102,20,-66,6,26,30,62, 
  /* [33][0][][] */ -79,-8,72,80,-8,9,-64,-10,-37,-59,22,-23,-30,-19,-2,127, 
  /* [34][0][][] */ 1,31,-82,-92,57,-17,-12,67,16,-7,-7,-25,-57,-22,-29,127, 
  /* [35][0][][] */ 77,6,23,-34,-6,10,-96,-16,-22,-127,-38,23,-3,-20,74,-13, 
  /* [36][0][][] */ -6,32,-127,-34,21,106,19,6,-16,-12,74,46,9,25,-43,63, 
  /* [37][0][][] */ 30,53,71,-69,56,-127,41,-8,-101,78,-54,-24,1,35,87,16, 
  /* [38][0][][] */ -33,120,31,-35,52,20,61,-79,4,-4,-127,46,-78,-111,-115,4, 
  /* [39][0][][] */ 76,93,-127,-122,-19,-16,18,-49,3,0,16,-40,74,-3,-110,-51, 
  /* [40][0][][] */ -67,21,-70,-102,-30,-4,34,-127,-8,-4,20,-40,65,105,32,86, 
  /* [41][0][][] */ -51,-108,12,127,3,-31,-77,-7,-10,-36,57,-57,-80,-13,23,17, 
  /* [42][0][][] */ -31,109,-2,-127,38,38,13,-38,86,-10,-74,29,117,3,-15,15, 
  /* [43][0][][] */ 9,35,-21,36,127,15,27,39,7,43,6,-120,-114,-34,-14,23, 
  /* [44][0][][] */ 102,6,20,42,-34,-23,-11,43,27,-59,21,2,127,5,-51,-47, 
  /* [45][0][][] */ 5,-82,-72,20,-24,-92,35,67,38,-18,29,29,-64,127,35,-20, 
  /* [46][0][][] */ 4,-52,36,63,12,7,-73,25,26,-35,43,-35,35,104,48,127, 
  /* [47][0][][] */ -45,-73,19,93,-20,-34,62,45,18,-64,-127,-34,45,-7,-62,24, 
  /* [48][0][][] */ -76,98,-10,-38,-17,18,3,-127,31,-19,20,-33,38,-117,-45,32, 
  /* [49][0][][] */ -68,17,34,-42,6,18,105,127,-50,-13,6,29,-48,44,-54,20, 
  /* [50][0][][] */ 43,28,-68,17,33,-127,-67,-1,-79,48,-45,-2,20,-78,-103,-46, 
  /* [51][0][][] */ -43,73,-13,122,-47,38,-55,-76,-76,-80,-3,-82,24,36,-27,127, 
  /* [52][0][][] */ -124,7,23,0,44,51,55,13,-2,-94,-47,-25,-118,-55,-127,-25, 
  /* [53][0][][] */ -43,-98,-60,-116,-47,-34,27,60,67,-44,-54,10,-29,57,39,127, 
  /* [54][0][][] */ 0,-80,7,-18,-74,45,65,-40,-5,-108,54,47,-31,-22,-127,39, 
  /* [55][0][][] */ -7,-36,-37,35,57,-16,62,48,-33,-50,-127,-23,44,-40,-17,19, 
  /* [56][0][][] */ 85,-28,-72,-32,-127,36,-123,-12,-21,-6,-45,26,97,-31,65,-3, 
  /* [57][0][][] */ -31,13,17,-20,87,29,40,51,-48,64,12,-1,-63,84,-127,-19, 
  /* [58][0][][] */ 44,1,-16,-11,32,-1,-68,-38,35,-127,-47,7,-81,-39,-10,46, 
  /* [59][0][][] */ -65,-23,-23,29,12,49,-96,-17,57,127,-79,17,-27,12,-22,-18, 
  /* [60][0][][] */ 12,-53,-26,2,-127,-32,45,18,-2,70,-4,61,23,-35,56,34, 
  /* [61][0][][] */ 25,12,-61,15,-51,-33,-127,-40,-16,-4,14,80,47,-54,92,33, 
  /* [62][0][][] */ 69,-55,116,0,-32,5,48,123,-57,101,-39,86,48,59,127,94, 
  /* [63][0][][] */ 32,-111,-17,-16,-76,19,51,-36,-30,-4,-13,-7,-45,127,122,17, 
  /* [64][0][][] */ -45,-5,-127,-68,26,19,28,8,-18,-82,43,25,80,-98,-89,99, 
  /* [65][0][][] */ -28,-11,32,29,83,-8,113,71,-53,-13,-58,-63,58,127,-66,-5, 
  /* [66][0][][] */ -30,-118,-7,-125,-69,-127,45,-31,24,-38,32,95,-65,-87,-58,126, 
  /* [67][0][][] */ -49,-97,-82,-37,-83,106,-14,-127,-85,-27,-37,-117,36,-25,-83,30, 
  /* [68][0][][] */ 112,39,-4,-54,-76,75,-97,-60,-96,-85,-10,5,84,-103,70,-127, 
  /* [69][0][][] */ 41,-8,34,-6,-9,-51,-42,40,2,127,-20,12,-14,29,55,-24, 
  /* [70][0][][] */ 25,-16,-12,84,-110,27,-12,-127,116,116,39,69,50,-46,-26,38, 
  /* [71][0][][] */ 127,-63,89,93,-60,-40,11,-25,123,10,-74,68,44,-126,61,-29, 
  /* [72][0][][] */ -1,-45,42,123,73,10,-127,116,79,-24,58,39,-64,-99,-42,77, 
  /* [73][0][][] */ 86,25,42,-127,58,-92,-92,39,1,91,-27,-3,27,-78,16,-8, 
  /* [74][0][][] */ 92,38,40,36,-127,-33,26,-5,-113,-46,8,-36,9,-52,26,19, 
  /* [75][0][][] */ 71,127,-92,23,78,67,-21,-35,0,-26,44,72,-100,55,89,74, 
  /* [76][0][][] */ -71,-44,-3,-43,-63,-2,116,6,-70,29,118,39,-41,-127,-41,120, 
  /* [77][0][][] */ -127,88,-9,14,-34,-59,48,108,44,-20,26,70,15,91,-50,76, 
  /* [78][0][][] */ 110,35,-48,24,-42,36,-127,7,-17,-7,-63,5,39,-72,12,19, 
  /* [79][0][][] */ -15,-16,127,34,-6,-97,-46,-75,-21,16,24,2,-27,96,-100,106, 
  /* [80][0][][] */ 27,56,50,-127,-18,-1,72,-30,25,19,-24,28,92,-42,-16,19, 
  /* [81][0][][] */ 41,-25,8,-127,99,68,-2,120,80,58,-7,-32,-21,37,-76,-85, 
  /* [82][0][][] */ 50,50,93,-26,127,-85,44,39,-7,75,2,36,-3,4,26,-85, 
  /* [83][0][][] */ -30,60,8,41,62,73,122,127,24,69,-43,-80,-77,80,-77,-97, 
  /* [84][0][][] */ -20,-112,10,81,39,-127,-45,50,-91,104,-79,-11,-107,89,0,-87, 
  /* [85][0][][] */ -126,26,-58,-21,-41,-67,-44,-54,-13,39,33,-89,-127,-28,-51,94, 
  /* [86][0][][] */ 0,50,78,127,2,-35,22,42,-16,11,-43,-74,12,77,-105,-56, 
  /* [87][0][][] */ -31,48,127,-16,-93,-26,21,19,16,-21,5,37,-48,39,-5,-25, 
  /* [88][0][][] */ -40,-79,-102,1,15,38,15,44,-21,-72,-127,-98,125,-3,-26,62, 
  /* [89][0][][] */ 39,37,17,-127,14,-75,-43,56,104,-9,32,-91,10,-9,45,-72, 
  /* [90][0][][] */ -3,90,29,-7,-31,46,46,102,10,-43,-9,127,65,18,-44,82, 
  /* [91][0][][] */ -91,-4,-7,37,111,49,-13,-120,-17,47,3,15,-92,-127,-100,-31, 
  /* [92][0][][] */ -25,105,13,-35,-127,17,-89,42,-51,78,104,77,26,13,41,4, 
  /* [93][0][][] */ 100,69,81,38,-127,-55,21,34,-53,-73,-14,-35,-2,-51,4,1, 
  /* [94][0][][] */ -27,-127,38,-104,37,42,-28,7,81,-20,-10,65,15,58,-48,32, 
  /* [95][0][][] */ -35,-35,-12,-59,127,104,-6,35,90,26,-62,71,-25,122,-40,19, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0013540388317778707, 0.001597441965714097, 0.0025152498856186867, 0.0031149848364293575, 0.0019505451200529933, 0.0015874131349846721, 0.0011773844016715884, 0.002938105957582593, 0.0023799403570592403, 0.0012429568450897932, 0.0029784534126520157, 0.0016934991581365466, 0.0017198687419295311, 0.0023928771261125803, 0.0024949805811047554, 0.0026635455433279276, 0.0030455503147095442, 0.0011054505594074726, 0.0016730667557567358, 0.0025268855970352888, 0.0016505887033417821, 0.00091963919112458825, 0.0012750355526804924, 0.0022678996901959181, 0.0021932248491793871, 0.0029222064185887575, 0.0014562278520315886, 0.0021402803249657154, 0.0023790218401700258, 0.0019490770064294338, 0.0015786450821906328, 0.0026971457991749048, 0.0013549216091632843, 0.0025901077315211296, 0.0023555061779916286, 0.0022188497241586447, 0.0022462233901023865, 0.0016822059405967593, 0.0021635715384036303, 0.0022309047635644674, 0.0022794133983552456, 0.0028616187628358603, 0.0028566855471581221, 0.0030419097747653723, 0.0036691483110189438, 0.0025509714614599943, 0.0024742872919887304, 0.0019347881898283958, 0.0025445399805903435, 0.0026009655557572842, 0.0019364373292773962, 0.002167015103623271, 0.0022074866574257612, 0.0030838558450341225, 0.0029991378542035818, 0.0029497414361685514, 0.0027628839015960693, 0.0024780356325209141, 0.0015649390406906605, 0.0023692375980317593, 0.0031252228654921055, 0.0024185797665268183, 0.002708556829020381, 0.0019622556865215302, 0.0019392457325011492, 0.001176836434751749, 0.0014975587837398052, 0.0026408466510474682, 0.0015866297762840986, 0.0033840960822999477, 0.0019798295106738806, 0.0020067344885319471, 0.0016756757395341992, 0.0020681479945778847, 0.001866323291324079, 0.0016985201509669423, 0.0021806091535836458, 0.0020289579406380653, 0.002770330524072051, 0.0024580114986747503, 0.0028001624159514904, 0.0021099925506860018, 0.0019368831999599934, 0.0021052558440715075, 0.0017368469852954149, 0.0019832656253129244, 0.0025535072200000286, 0.0031210898887366056, 0.00061838253168389201, 0.0027270226273685694, 0.0031535159796476364, 0.0018374521750956774, 0.0010607084259390831, 0.0019860435277223587, 0.0023393104784190655, 0.0020936834625899792, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27757, -6905, 2505, -7755, 11896, -11919, 19407, -9137, 9987, -10228, 16026, 12371, -3352, -28883, -1567, 5633, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.6234787886496633e-05, 5.485103974933736e-05, 7.0096808485686779e-05, 6.2771447119303048e-05, 0.00010166490392293781, 0.00013493561709765345, 8.6265543359331787e-05, 8.1330988905392587e-05, 0.00010292121442034841, 0.0001005810554488562, 9.8544514912646264e-05, 7.1615584602113813e-05, 7.7073789725545794e-05, 7.9706886026542634e-05, 7.9482102592010051e-05, 8.7901476945262402e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 11,31,-7,-8,-36,-78,-11,6,-12,-98,14,-13,68,-80,60,47,-96,-57,62,54,107,19,-87,6,-14,84,123,72,3,72,87,-28,25,-8,8,-41,-1,46,-41,-12,127,11,36,-56,-22,-3,14,-48,39,-51,102,-18,-47,0,47,5,-29,-53,-8,21,-29,51,-60,-24,38,9,85,23,-15,-26,12,7,-19,51,-4,46,78,-13,59,28,-17,37,41,63,-70,-19,-17,71,28,10,-100,-27,20,34,115,71, 
  /* [1][0][][] */ 16,11,-53,-26,11,-20,108,-71,-66,-31,-75,-63,-9,-59,-7,-60,-45,-25,-41,-16,-1,-89,107,-11,3,17,-9,84,-29,14,-31,49,-46,40,47,18,-6,70,-59,69,43,8,-1,-61,63,-51,15,51,-83,15,51,-78,-51,47,75,59,12,23,-83,7,-42,5,-8,-25,32,27,117,47,-70,-127,-7,-7,16,69,-32,48,-67,-27,118,-67,43,-31,68,-65,-30,-67,-13,8,-31,-48,48,16,61,-67,-27,58, 
  /* [2][0][][] */ 13,-20,46,-10,78,68,-68,27,-65,42,-14,-25,34,-10,14,11,27,-33,-127,-23,-16,-58,4,30,-8,-20,-33,41,-38,-16,-18,61,-32,-27,7,19,-47,7,-23,-3,79,19,-16,67,11,44,3,-24,-65,3,-19,61,-29,69,47,-54,42,12,42,37,-18,-5,-30,55,44,-17,-60,-10,-2,-10,5,-33,32,45,48,65,-51,-10,-31,-58,37,46,42,-26,-3,-54,-4,-42,-29,-36,1,67,5,-18,87,-30, 
  /* [3][0][][] */ 23,-23,-40,-127,-18,-58,111,-17,36,95,-62,-8,9,-16,-26,69,57,33,-18,48,-33,6,6,0,-46,87,42,7,-53,-26,-35,73,-4,-27,15,-30,-14,-36,-44,56,3,-1,-31,10,58,-49,0,40,58,-48,14,-30,113,41,21,-19,-12,-31,-8,-41,-48,34,63,-17,-29,-16,103,-52,-43,-10,-59,10,-26,-58,-5,-72,27,-24,112,15,-11,-55,-46,-26,-34,-63,64,60,-26,48,-62,8,24,-63,-19,45, 
  /* [4][0][][] */ -23,62,56,8,-22,33,-47,-26,16,-23,-9,-14,19,29,-30,17,-20,-35,-12,-49,28,-18,-61,15,-28,-39,-18,18,-30,127,-71,-25,15,-22,12,-22,65,29,-24,18,30,13,11,-40,-45,-3,54,-32,31,-9,-47,3,-63,29,35,23,-10,49,-24,21,-24,-54,-26,13,60,23,-57,4,-8,-3,19,-61,-5,45,58,64,-32,7,-57,22,12,63,23,-67,50,-55,-23,-65,-35,-43,-42,-13,-29,-9,22,-30, 
  /* [5][0][][] */ 8,-19,49,-18,-13,-17,-10,-4,24,8,-17,-15,-29,-32,17,-9,-15,2,-59,-50,-32,22,-17,10,28,-53,63,-15,14,55,-10,73,-17,-82,23,17,-9,-43,-27,14,-49,1,-26,14,8,19,-79,25,-19,20,51,-20,12,-59,6,12,-31,-58,12,-31,47,27,15,66,-47,7,111,-13,-17,-18,5,23,14,18,40,-2,-17,-14,127,34,-28,-18,-30,8,42,60,19,95,10,-40,4,25,12,-31,-27,7, 
  /* [6][0][][] */ 16,-43,87,41,-14,98,-42,-127,-17,-55,-58,57,10,11,-46,49,15,37,-6,-74,-98,-7,-69,-26,15,-35,-13,75,-84,19,-23,-21,5,69,-16,4,24,-39,29,-21,-52,38,52,-13,14,51,-82,13,27,-2,-72,-89,42,7,-47,18,25,-10,30,-37,-3,-33,18,-2,18,-67,-67,-3,-74,-9,-7,-53,-31,-75,7,-68,59,-4,-66,6,-23,53,23,-83,52,-17,-12,0,-66,36,-83,54,50,-63,69,-69, 
  /* [7][0][][] */ -17,-2,-48,52,-45,27,42,-14,-80,-18,96,44,11,-37,-4,-45,-18,-15,16,35,-46,-31,-48,-36,56,54,-29,66,11,14,35,25,-43,-127,48,91,-14,9,-54,-5,-4,-10,30,-82,19,81,62,71,-22,46,-56,-6,57,-45,35,-48,-33,18,-60,-34,44,11,11,-50,72,-44,110,-3,-71,-31,45,8,-8,-27,-74,-10,27,-32,102,-57,-19,-20,-74,-13,54,-4,-87,26,-23,28,-14,27,55,1,82,-6, 
  /* [8][0][][] */ -31,-60,-9,-12,-13,-21,28,23,-1,-10,47,56,17,30,-45,0,69,5,17,22,4,-68,-40,-31,-29,-39,80,-4,-25,54,11,-30,-7,2,-4,-1,-46,-3,17,-41,-3,39,18,-50,25,-24,35,-7,34,0,47,-8,9,12,-32,5,-13,116,-64,0,-6,-71,-48,-18,-87,-30,-14,14,-16,20,32,-34,-19,-127,63,-107,11,15,-51,20,-21,8,-7,84,66,-82,-40,62,-38,110,21,-14,-59,10,-7,-64, 
  /* [9][0][][] */ -28,-41,-22,25,22,37,4,33,-48,17,61,60,-33,44,15,-54,-2,21,-18,-55,1,36,0,22,-35,16,9,25,39,-6,6,-2,-28,-20,18,58,-12,-9,48,-4,-12,-24,15,16,13,47,-1,24,-40,20,-11,41,108,18,-5,5,28,-1,32,7,-34,-1,67,7,-1,11,52,19,43,-16,-12,27,21,-127,-35,-115,-34,-19,31,-11,1,31,5,-40,42,5,-55,0,-7,108,33,24,65,20,-6,28, 
  /* [10][0][][] */ 27,45,22,8,-4,2,-41,-17,50,13,-38,23,19,13,0,-59,-28,-7,16,-19,7,-8,-9,-23,9,-18,-82,45,-17,54,-6,3,7,16,-26,12,27,-3,12,3,33,-8,46,-31,-24,-10,17,24,7,7,7,-21,-39,-11,-11,31,-1,13,-12,-2,-6,-41,-19,16,-13,-21,-98,-20,-40,-22,55,-11,-16,26,28,13,41,-27,-100,13,-17,30,3,-17,7,5,-68,-127,-19,22,8,18,57,-42,24,34, 
  /* [11][0][][] */ 11,-47,9,-23,-40,23,19,32,59,-12,-39,-45,14,-3,10,-2,-30,40,22,-55,16,41,19,-9,35,0,62,20,30,-33,-21,20,15,103,-84,7,11,-7,27,16,-56,44,-35,15,-31,-13,-4,-13,53,1,-27,-2,-20,23,-55,68,-22,-6,-18,-20,21,16,-7,-68,-13,-54,-127,-76,-2,-28,-77,25,55,10,11,-9,30,49,-107,-42,-2,13,-18,-3,-13,-15,64,85,40,-37,45,17,-38,33,76,28, 
  /* [12][0][][] */ 30,11,-21,-6,38,-12,8,21,29,-27,10,-1,3,-12,0,2,13,-31,-30,-19,-11,61,12,72,-29,-35,-127,-4,82,-26,15,-1,-39,-75,69,1,39,-16,-2,19,-14,-49,9,49,53,-15,29,-14,-73,-3,-52,96,49,-19,24,-64,27,37,-48,-35,18,53,57,7,-32,-27,16,54,122,22,38,26,8,-13,-15,-5,-47,-64,40,-78,26,-51,47,-55,9,13,8,-98,-6,15,-41,9,7,59,23,41, 
  /* [13][0][][] */ -8,11,-48,51,46,40,-24,-9,22,81,-53,33,-60,-30,60,-74,22,48,64,-25,-51,-65,2,41,51,45,-21,52,7,43,58,-24,-36,71,-8,58,34,-62,-60,-39,0,-2,3,40,41,67,-49,52,-55,37,12,33,-37,-35,77,58,24,-56,-20,-23,8,31,-4,-22,-3,73,123,55,30,-16,-45,-16,61,49,-80,53,14,-97,127,-60,-15,-48,18,-16,39,77,-36,-27,-25,-31,6,59,60,18,76,64, 
  /* [14][0][][] */ -10,64,-9,12,-72,-52,24,45,-66,-25,89,19,-69,-4,73,-11,-40,41,-50,54,-10,27,-96,-2,-34,4,-48,-127,9,-3,26,78,-47,30,13,-21,-41,-53,-19,-65,39,-45,53,-38,-2,33,-72,31,-10,-32,73,9,-5,19,-15,16,-60,38,1,41,36,51,14,31,36,-32,11,-89,50,73,65,21,-56,53,8,10,41,-5,41,35,-74,118,12,-109,79,-3,-4,8,-108,-1,-22,-12,-26,14,34,13, 
  /* [15][0][][] */ 80,-49,29,41,54,1,-18,20,2,40,-69,-13,63,64,5,-20,0,14,-75,15,-16,-17,34,40,76,-32,90,28,28,-19,-43,58,47,43,-18,-73,60,60,78,60,73,43,-22,31,-36,-127,33,-39,-34,-23,-6,5,-28,-42,-31,51,5,13,-26,20,9,-52,-49,37,16,22,-92,30,5,-33,18,6,6,-106,-36,-91,-25,1,-120,43,80,-30,40,7,-50,8,-8,-10,37,70,19,-67,-29,-21,36,-30, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.003664978314191103, 0.0023311690893024206, 0.002979114418849349, 0.0026677865535020828, 0.0043207583948969841, 0.0057347635738551617, 0.0036662856582552195, 0.0034565669484436512, 0.0043741515837609768, 0.0042746947146952152, 0.0041881417855620384, 0.003043662291020155, 0.0032756358850747347, 0.003387542674317956, 0.0033779891673475504, 0.003735812846571207, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 8072, -2306, -9416, 10585, -3174, -2203, 801, -1681, 1521, -5554, 322, -4725, 11785, -5577, -4140, -10096, 1296, 917, -15594, 2490, -3537, -365, -3950, -2192, 0, 6229, -10848, -4607, -4269, -1816, 3833, -975, 14378, -1648, 697, 764, -26, 12078, 3238, 10318, 1556, 6601, -320, 3841, -191, 1041, 11845, 3974, -5368, 1645, -7186, -233, -639, -4164, -48, 1068, -5426, 2807, 453, 5722, -2304, 191, -2559, 8718, 12690, 741, 12230, 6422, -4285, 192, 9557, -1119, 450, 1406, -2551, -257, 14891, 15111, 9006, 6059, 12362, -2060, 4080, 12279, -1132, 1183, 13275, -7935, 10761, -777, -7225, -2908, -783, -1173, 22297, -1635, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012852389772888273, 0.00029642783920280635, 0.00011645167978713289, 0.00012943295587319881, 0.00024951226077973843, 0.00062502571381628513, 0.00011799941421486437, 0.00028293204377405345, 0.00033500345307402313, 0.00018752262985799462, 0.00033101259032264352, 0.00019635065109468997, 9.4520575657952577e-05, 0.00011638917931122705, 0.00019956582400482148, 0.00011674721463350579, 0.00035091169411316514, 0.00033720795181579888, 8.184041507774964e-05, 0.00045747793046757579, 0.00020306647638790309, 0.00029731052927672863, 0.00015708169667050242, 0.00021008419571444392, 0.0023948748130351305, 0.00018849071057047695, 0.00020967595628462732, 0.00013934553135186434, 0.00033896963577717543, 0.00020142344874329865, 0.0001485920074628666, 0.00041155106737278402, 7.8629251220263541e-05, 0.00036552565870806575, 0.00016863181372173131, 0.00020570364722516388, 0.00042124261381104589, 9.5618670457042754e-05, 0.00030098503339104354, 0.00010145238047698513, 0.00056712148943915963, 0.0001530392182758078, 0.00022871990222483873, 0.00020162689907010645, 0.00016734722885303199, 0.00033843031269498169, 0.00015340033860411495, 0.00029483233811333776, 0.00017521134577691555, 0.00030297652119770646, 0.0001958423963515088, 0.00029051973251625896, 0.00015480996808037162, 0.00023750393302179873, 0.00026079764938913286, 0.00023650910588912666, 0.00012485991464927793, 0.00058825098676607013, 0.00047593232011422515, 0.00019566107948776335, 0.00029784694197587669, 0.0002893376222345978, 0.00016135921759996563, 0.0001125587587011978, 0.00020170808420516551, 0.00038102862890809774, 0.00013773592945653945, 0.00020949913596268743, 0.00028625200502574444, 0.00046309712342917919, 0.00010427548113511875, 0.00030383854755200446, 0.00051660096505656838, 0.00018951963284052908, 0.00016488475375808775, 0.00024731201119720936, 9.0256340627092868e-05, 0.00011166804324602708, 0.00013748733908869326, 0.00021130565437488258, 0.00010194395144935697, 0.00024354032939299941, 0.0001659838599152863, 0.00027114350814372301, 0.00015699896903242916, 0.00041184615110978484, 0.0001202714629471302, 0.00022725743474438787, 0.00013575115008279681, 0.00023119263642001897, 0.00010091443255078048, 0.00026978165260516107, 0.00039347511483356357, 0.00017522543203085661, 6.6200373112224042e-05, 0.00030988929211162031, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -26,3,58,-32,125,-1,36,-14,-1,28,-19,-8,-15,4,6,15,-23,4,22,-44,-8,36,19,59,3,-9,-26,30,28,-1,20,11,8,11,-13,-49,-9,-81,-8,5,-5,-29,35,-69,-10,38,-82,-15,-34,-14,14,44,-69,-1,39,-3,41,-16,10,-38,0,-24,9,-63,2,-11,-43,-45,-3,37,30,8,5,18,-9,-3,-29,-30,127,-113,-97,21,-70,-26,-23,-18,16,10,-52,-12,28,-26,-9,9,-25,0, 24,51,127,-45,-34,7,127,-63,1,-56,-49,1,-47,0,-75,114,-13,64,104,-37,3,127,80,127,20,13,58,98,127,45,127,-28,-74,-4,-97,-33,-31,-105,127,-84,-23,-127,-23,-32,55,-37,-24,2,25,-9,50,127,-85,36,-75,7,-66,-7,-11,20,-14,-127,-111,-75,-95,1,-9,-64,-3,28,-13,108,-127,-19,1,-29,-117,-71,-6,-98,-127,6,71,-95,127,71,-67,36,-61,4,120,-10,7,127,-83,-74, 9,11,10,-46,81,9,42,-23,-16,25,-19,21,-11,6,9,4,-21,-6,14,-49,-18,23,-43,37,-11,-17,-8,-2,17,-16,1,9,-34,13,-10,50,-3,-67,-24,37,-5,-36,17,-22,4,-31,-54,-16,-34,-16,15,27,2,0,10,-7,93,-16,5,-40,-5,-18,-27,20,-50,-36,127,-27,17,19,-6,19,24,-7,-16,19,31,37,-44,-35,-113,13,-107,-20,3,-35,-3,-14,-21,-26,32,44,0,63,-16,1, 
  /* [0][1][][] */ -86,6,67,-67,43,88,-53,1,0,-1,-21,7,-127,31,29,90,-21,30,109,8,40,-25,124,-7,54,18,78,26,4,-7,-26,-16,-93,-10,50,-24,-3,-127,-45,-127,-27,-42,94,-26,-65,127,-100,-94,75,42,27,-44,-104,66,63,-12,63,-39,37,-32,34,-16,103,-127,-21,15,-22,-58,1,-2,-119,23,77,127,4,-70,-127,-97,-68,-41,-76,6,-22,-57,10,16,-127,47,-127,127,108,-72,127,-12,-33,-12, 58,127,116,127,-127,-127,112,-38,127,127,-69,-63,-108,127,-15,127,127,-127,127,127,127,-87,108,-124,-127,-127,127,127,-101,127,-49,127,-50,127,127,-97,127,54,16,-35,127,5,-127,-96,127,-25,127,127,127,-127,127,-113,112,127,-127,127,-91,127,-127,127,-101,116,127,-51,127,127,-23,127,-99,-127,-1,-127,-5,100,127,67,24,-127,95,-52,4,127,127,127,77,53,-109,127,-88,55,-15,-14,-80,-6,-127,-23, -127,-26,45,-76,16,65,-71,25,-33,-13,0,127,-115,37,33,103,-36,40,108,10,21,-20,42,-13,45,10,26,-2,-1,-4,0,-20,-127,-21,85,127,0,-56,-66,-118,-37,-24,23,-10,-59,-68,-83,-125,34,54,2,-31,127,17,102,-34,127,-29,45,-69,7,-41,-109,-25,-107,-20,-69,-41,1,-2,-127,-2,45,-97,-7,127,-87,-41,-54,50,-80,-8,-62,-70,-19,15,-116,53,-84,-70,127,127,-33,16,-76,-2, 
  /* [0][2][][] */ -31,-31,5,-57,35,16,-28,19,-9,20,35,7,45,34,2,-32,-8,-7,-10,-22,3,-12,24,7,7,1,1,-23,10,-17,-47,11,22,3,-18,-35,2,-31,-51,27,-30,1,31,29,9,6,-58,-11,-1,-19,-3,-4,-9,-18,21,-1,32,-25,7,-35,18,35,-23,-110,-19,-32,127,-3,42,19,-32,-4,-5,-18,9,-30,-60,-23,-39,-5,25,15,-52,-38,-11,-11,26,-5,-47,-6,-86,-9,-7,-25,-23,-10, -43,-61,21,-105,-42,12,72,127,-53,110,127,-4,-98,69,127,102,-13,-44,107,-42,-7,-32,127,16,12,-13,65,-12,12,-10,-110,-44,-48,-26,-119,-10,-98,-74,2,-100,-23,-79,-26,127,31,-24,-44,-18,34,-23,7,-11,51,52,-84,-31,-15,-47,41,-72,127,34,100,-64,-111,-66,-25,-19,127,11,-80,14,10,-36,33,-22,31,-83,5,127,-93,-14,-46,-97,31,-127,-20,27,-44,2,23,1,15,-113,-124,127, -25,2,-22,-42,39,3,-29,26,-23,8,16,41,44,30,-2,-22,-15,10,46,-21,9,-13,-8,25,-2,5,-21,-29,7,-11,-59,0,-18,10,-1,2,1,-23,-39,55,-38,-16,0,36,1,-13,-68,-6,-14,-25,7,-6,-3,-19,17,-8,79,-13,9,-49,14,32,-12,10,-41,-29,-45,19,41,0,-70,-12,-73,-43,-6,-22,-28,-18,107,26,8,-4,-39,-12,-28,-15,19,19,-36,2,-90,21,-2,3,-40,7, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0054622655734419823, 0.012598183006048203, 0.0049491962417960167, 0.0055009005591273308, 0.010604270733892918, 0.026563592255115509, 0.0050149750895798206, 0.012024612165987492, 0.014237646013498306, 0.0079697119072079659, 0.014068035408854485, 0.0083449026569724083, 0.00401712441816926, 0.0049465401098132133, 0.0084815472364425659, 0.0049617565236985683, 0.014913746155798435, 0.014331337064504623, 0.0034782176371663809, 0.019442811608314514, 0.008630325086414814, 0.012635697610676289, 0.0066759721376001835, 0.0089285783469676971, 0.1017821729183197, 0.0080108549445867538, 0.0089112278074026108, 0.0059221847914159298, 0.014406208880245686, 0.0085604963824152946, 0.0063151600770652294, 0.017490919679403305, 0.0033417432568967342, 0.01553483959287405, 0.0071668517775833607, 0.0087424051016569138, 0.017902810126543045, 0.004063793458044529, 0.012791863642632961, 0.0043117259629070759, 0.02410266175866127, 0.0065041668713092804, 0.0097205955535173416, 0.0085691427811980247, 0.007112257182598114, 0.014383288100361824, 0.0065195141360163689, 0.012530374340713024, 0.0074464818462729454, 0.012876501306891441, 0.0083233015611767769, 0.012347088195383549, 0.0065794233232736588, 0.010093917138874531, 0.01108389999717474, 0.010051636956632137, 0.0053065461106598377, 0.025000667199492455, 0.02022712305188179, 0.0083155957981944084, 0.012658494524657726, 0.012296848930418491, 0.0068577667698264122, 0.0047837472520768642, 0.0085725933313369751, 0.01619371585547924, 0.0058537768200039864, 0.0089037129655480385, 0.01216571033000946, 0.019681626930832863, 0.0044317077845335007, 0.01291313860565424, 0.021955540403723717, 0.008054584264755249, 0.0070076021365821362, 0.010510760359466076, 0.0038358944002538919, 0.0047458917833864689, 0.0058432118967175484, 0.0089804902672767639, 0.0043326178565621376, 0.010350463911890984, 0.0070543140172958374, 0.011523598805069923, 0.0066724559292197227, 0.017503460869193077, 0.00511153694242239, 0.0096584409475326538, 0.0057694236747920513, 0.0098256869241595268, 0.0042888633906841278, 0.011465719901025295, 0.016722692176699638, 0.0074470806866884232, 0.0028135157190263271, 0.013170294463634491, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1466, 6193, 310, 1241, 5823, 16065, -3, 1623, 7790, -1029, 11033, 2581, 1465, 450, 3711, 371, 2642, 3717, -372, 8312, 452, 9053, -1381, 2239, -9098, 868, 2543, 725, 6187, 1012, 3972, 3479, 1323, 15685, 2500, 4966, 3798, 2747, 4493, 2457, 20781, 1328, 1831, 2009, 2625, 6115, 5704, 4567, 547, -1054, 2003, 4310, 2266, -3060, 6021, 69, 2600, 19773, 734, 1787, 2191, 11624, 2829, -660, 10536, 11066, 1652, 2351, 4032, 5732, 2004, 1590, -2025, 4713, 2119, 3067, 1208, 10259, 3844, 6336, 2763, 1460, 3297, 13072, -303, 5487, 4788, 1829, -576, 2233, 1250, 9406, 2427, 1529, 3385, 4167, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00021718490461353213, 0.00012536587018985301, 0.00027077540289610624, 0.0002865137648768723, 0.00013588937872555107, 6.0659833252429962e-05, 0.000337004050379619, 0.00016338952991645783, 0.00010728851339081302, 0.00021304952679201961, 8.3204919064883143e-05, 0.00016847177175804973, 0.00023906207934487611, 0.00041931119631044567, 0.00014749268302693963, 0.00018340200767852366, 0.00020708036026917398, 0.00014869333244860172, 0.00016797591524664313, 0.00010403375199530274, 0.00028684857534244657, 8.2948165072593838e-05, 0.00025769762578420341, 0.00017137652321252972, 8.1259895523544401e-05, 0.00023828652047086507, 0.00020701556059066206, 0.00025769678177312016, 0.0001292350934818387, 0.00023083892301656306, 0.00015136730507947505, 0.00016859847528394312, 0.00024646343081258237, 5.5308384617092088e-05, 0.00017087873129639775, 0.00013376695278566331, 0.00014193043170962483, 0.00015327060827985406, 0.00011574498057598248, 0.00015836338570807129, 5.0365590141154826e-05, 0.0002022051194217056, 0.00019688298925757408, 0.00011507754970807582, 0.00014891309547238052, 0.00013410153042059392, 0.00013861425395589322, 0.00016245743609033525, 0.00041171084740199149, 0.00020665550255216658, 0.00022493225696962327, 0.0001523898245068267, 0.00020469467563088983, 0.00012511250679381192, 0.00011175279360031709, 0.00037100678309798241, 0.00012908053759019822, 4.9400343414163217e-05, 0.00022530397109221667, 0.00016746915935073048, 0.00017930725880432874, 7.7099291956983507e-05, 0.00018705138063523918, 0.00022080958297010511, 8.6997490143403411e-05, 8.1922633398789912e-05, 0.00024317523639183491, 0.00019822741160169244, 0.00017953761562239379, 9.8655022156890482e-05, 0.00024079700233414769, 0.00014125344750937074, 0.00023448021966032684, 0.00015474781685043126, 0.000206884098588489, 0.0002192121755797416, 0.00020113188656978309, 7.8746881627012044e-05, 0.00017047597793862224, 0.0001437379396520555, 0.00016595906345173717, 0.00013103021774441004, 0.00013675948139280081, 7.1919130277819932e-05, 0.00014207998174242675, 0.00013970902364235371, 0.00014806873514316976, 0.00023952846822794527, 0.00027389416936784983, 0.00023686404165346175, 0.00018685363465920091, 9.0049834398087114e-05, 0.00019851296383421868, 0.00023412081645801663, 0.00015573705604765564, 0.00015164756041485816, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 38,17,1,68,-127,-25,88,58,35,87,-44,43,17,26,-1,97, 
  /* [1][0][][] */ -27,22,-86,-22,127,124,3,-13,-24,22,-56,39,-55,64,-48,-45, 
  /* [2][0][][] */ -29,60,70,0,66,72,7,46,44,-5,40,-12,50,-127,-3,7, 
  /* [3][0][][] */ 127,-26,12,5,26,33,-7,7,19,30,-52,-17,-39,39,-19,51, 
  /* [4][0][][] */ -65,-26,-20,56,-127,-7,-80,-30,-2,21,23,-43,-9,45,11,116, 
  /* [5][0][][] */ -127,14,11,20,114,23,20,39,-63,7,-34,-32,-53,68,-112,-25, 
  /* [6][0][][] */ -127,5,-24,28,-11,-69,58,22,-14,-28,-54,35,-2,-12,-54,5, 
  /* [7][0][][] */ -58,122,43,-116,97,78,127,33,40,-12,-8,39,105,-12,-83,-2, 
  /* [8][0][][] */ -14,-43,-68,87,-37,86,-43,-59,41,-52,57,47,127,61,-102,4, 
  /* [9][0][][] */ -13,-127,-39,96,-66,-54,25,63,39,12,13,41,-75,27,12,-17, 
  /* [10][0][][] */ -36,-70,-36,28,-127,97,41,-113,43,-29,74,-18,79,126,-33,64, 
  /* [11][0][][] */ -86,-107,-5,17,-37,69,50,-9,31,1,43,-95,-5,127,-68,85, 
  /* [12][0][][] */ -9,-86,-63,82,-80,-127,13,43,65,58,-41,87,4,-54,-19,-11, 
  /* [13][0][][] */ -64,-21,-41,-7,-14,5,38,7,-10,127,-15,-26,45,37,21,-11, 
  /* [14][0][][] */ -100,-45,-48,-22,-29,82,-52,-100,127,-88,65,-22,77,-79,-105,-98, 
  /* [15][0][][] */ -6,-127,79,-75,-56,-3,27,67,-5,-56,-84,-39,96,-40,-48,-27, 
  /* [16][0][][] */ 11,-24,40,-42,55,24,-33,-46,77,-127,17,-15,-28,-21,-82,-119, 
  /* [17][0][][] */ -22,-6,26,-41,8,-9,-45,-15,73,-44,-1,45,68,-68,-6,-127, 
  /* [18][0][][] */ 69,2,-30,-127,-1,-26,107,-58,21,68,-17,58,-22,67,-21,-118, 
  /* [19][0][][] */ -86,-32,-19,-67,-91,68,-24,25,63,-39,62,-127,9,13,-41,0, 
  /* [20][0][][] */ 6,80,104,-119,66,7,-33,78,-113,-127,39,-94,-23,109,-11,-16, 
  /* [21][0][][] */ 65,-94,-113,21,38,47,74,83,-87,-127,-8,0,66,-99,0,20, 
  /* [22][0][][] */ 61,-6,74,22,-16,-21,51,64,24,86,33,5,-14,-16,127,-10, 
  /* [23][0][][] */ -103,-57,-71,43,63,48,29,2,12,37,17,-99,28,93,89,127, 
  /* [24][0][][] */ 14,3,69,35,14,-89,8,-46,25,127,-121,74,-26,-65,69,-83, 
  /* [25][0][][] */ 127,-79,113,112,29,-15,-21,36,-99,66,32,-45,-16,12,104,-25, 
  /* [26][0][][] */ -19,18,18,42,-40,108,-26,39,-64,-23,-81,41,6,17,32,-127, 
  /* [27][0][][] */ 38,-16,-19,-49,-54,-3,-115,-1,-99,-14,-72,-57,-87,40,-1,127, 
  /* [28][0][][] */ -48,3,20,-2,21,-17,-127,6,-9,-28,-3,-16,10,-54,-62,-35, 
  /* [29][0][][] */ -19,-127,-37,107,-22,3,123,2,83,57,-105,68,30,-35,-37,87, 
  /* [30][0][][] */ 45,-92,-41,-2,-113,10,84,-66,35,32,-7,-29,-9,127,0,64, 
  /* [31][0][][] */ -127,-17,15,79,-28,-4,-52,-8,-17,-44,2,-27,-37,-46,-21,69, 
  /* [32][0][][] */ -127,-73,-73,7,-83,-53,3,12,82,40,-63,-63,22,44,18,-4, 
  /* [33][0][][] */ -15,38,-122,37,-127,-87,61,3,-114,30,-41,-64,-27,110,80,97, 
  /* [34][0][][] */ 25,38,15,36,-61,-42,44,2,23,-127,-24,38,-39,36,42,77, 
  /* [35][0][][] */ 19,9,-56,-13,-127,5,81,-18,28,31,2,-9,11,47,40,66, 
  /* [36][0][][] */ 6,-23,-71,72,127,-17,22,98,-85,1,-92,-100,20,-37,20,38, 
  /* [37][0][][] */ -94,44,0,-65,32,-84,-30,-26,7,-20,-27,48,51,-69,18,-127, 
  /* [38][0][][] */ 18,106,24,-115,-127,-47,-105,-42,-18,-71,68,89,-34,-85,78,-11, 
  /* [39][0][][] */ 20,-36,7,80,16,81,90,-26,-48,37,13,-11,-4,127,44,125, 
  /* [40][0][][] */ 86,48,89,94,-59,-66,8,15,-83,54,-32,-30,-59,-41,127,-3, 
  /* [41][0][][] */ -33,-4,8,46,-85,127,16,44,-55,31,-108,11,20,55,39,-126, 
  /* [42][0][][] */ -35,-125,51,-15,127,-4,92,24,-29,-119,-89,-28,-41,24,13,43, 
  /* [43][0][][] */ -78,-101,-65,-32,127,57,31,85,-78,-79,-103,-91,63,50,-92,84, 
  /* [44][0][][] */ -56,-89,-104,-111,31,113,45,8,-59,-127,-67,87,-70,33,38,113, 
  /* [45][0][][] */ -2,-17,-41,2,-127,49,0,-48,22,-44,20,-32,-4,25,-18,31, 
  /* [46][0][][] */ 35,-68,-29,22,72,-99,-6,105,-10,-41,15,21,-75,-66,27,-127, 
  /* [47][0][][] */ -71,-48,6,97,20,4,-1,40,10,127,70,96,-38,36,-39,75, 
  /* [48][0][][] */ 35,-12,-68,-85,33,-73,12,52,45,-65,-12,31,-61,11,-31,-127, 
  /* [49][0][][] */ 42,44,1,46,-39,-26,75,87,-54,127,-44,34,-54,-32,81,125, 
  /* [50][0][][] */ 1,8,12,9,-127,-20,-23,-54,51,29,21,56,-27,-59,7,-5, 
  /* [51][0][][] */ 21,20,1,-127,-4,75,41,-42,23,28,29,-17,81,79,-21,5, 
  /* [52][0][][] */ 23,-35,-5,-105,72,-114,3,-34,29,-22,127,-72,38,-20,-42,109, 
  /* [53][0][][] */ -53,-51,17,-33,-36,-127,22,-113,-23,97,-102,78,-36,-9,5,-71, 
  /* [54][0][][] */ 68,81,31,-45,-127,-12,-76,-102,-1,9,43,81,-53,-67,71,22, 
  /* [55][0][][] */ 30,7,-28,106,-29,15,42,-8,32,127,20,60,11,24,7,44, 
  /* [56][0][][] */ 26,-127,-99,64,-102,20,31,69,110,-7,80,31,-57,-2,79,112, 
  /* [57][0][][] */ 33,52,90,-115,96,4,9,25,88,-24,21,127,62,-66,88,-56, 
  /* [58][0][][] */ 47,-78,16,-72,9,7,-5,127,42,90,-5,40,38,20,110,-16, 
  /* [59][0][][] */ -48,34,22,-42,-23,-90,10,20,18,2,-83,-111,-127,-48,59,-15, 
  /* [60][0][][] */ 41,-27,22,16,-4,-5,13,-45,53,127,6,79,1,-39,14,-39, 
  /* [61][0][][] */ 48,62,13,-14,-88,-127,0,-50,-74,-17,-21,12,-52,-26,71,98, 
  /* [62][0][][] */ -19,70,-60,53,-73,127,-45,40,-48,-25,-39,4,-60,33,54,-74, 
  /* [63][0][][] */ 22,-27,-45,-127,-19,-80,75,4,-23,-113,-47,44,-52,84,45,-24, 
  /* [64][0][][] */ -32,22,2,-8,37,-66,13,93,-127,-25,-78,-32,-50,58,66,49, 
  /* [65][0][][] */ -21,-4,-45,-15,49,44,-2,-83,-127,-72,-13,-40,-101,113,-42,65, 
  /* [66][0][][] */ -39,62,-13,24,-46,127,-31,30,-54,27,-31,42,-42,48,37,-94, 
  /* [67][0][][] */ 54,-32,-43,-16,1,-75,57,-103,3,11,10,127,-74,-46,-5,-110, 
  /* [68][0][][] */ 21,-127,-33,86,-20,-9,33,53,61,21,60,1,-81,24,10,-15, 
  /* [69][0][][] */ 22,105,58,-102,49,-8,-55,99,24,109,59,65,64,-127,29,-118, 
  /* [70][0][][] */ 36,26,22,-16,79,11,-88,-35,-127,-103,6,16,-41,65,-120,13, 
  /* [71][0][][] */ 2,-106,36,-42,92,-27,20,4,-72,107,-127,-34,0,107,-10,26, 
  /* [72][0][][] */ 7,9,34,-7,-31,-4,-89,-59,-13,51,-6,44,37,79,-127,3, 
  /* [73][0][][] */ -18,-50,-27,-32,47,-118,20,-40,76,79,115,-7,4,-5,-62,127, 
  /* [74][0][][] */ 4,26,-35,71,-85,3,108,29,65,59,25,106,127,30,-68,17, 
  /* [75][0][][] */ -22,24,-19,41,-64,127,-7,17,-45,32,-43,45,-22,43,43,-72, 
  /* [76][0][][] */ -94,114,-80,34,-93,-3,-3,24,75,68,-33,-31,71,-42,-127,45, 
  /* [77][0][][] */ 107,127,-126,103,70,64,61,29,60,12,84,-55,52,0,62,8, 
  /* [78][0][][] */ 1,-47,-5,-50,70,-112,27,-45,28,41,127,-38,4,-6,-73,124, 
  /* [79][0][][] */ -63,58,1,14,-20,-29,-11,9,-127,-16,52,0,96,51,-57,-35, 
  /* [80][0][][] */ -95,41,95,13,67,48,12,-124,-127,61,-86,-61,-41,-89,7,104, 
  /* [81][0][][] */ 91,101,-14,-23,24,-18,92,103,-116,127,-58,-24,-48,34,111,124, 
  /* [82][0][][] */ 98,81,-32,-42,-15,-88,87,-74,48,9,-43,127,106,-49,97,-44, 
  /* [83][0][][] */ -21,-36,33,19,1,22,-23,-92,93,-28,76,-5,36,-37,-36,-127, 
  /* [84][0][][] */ -126,-68,-54,-26,4,119,127,9,99,65,104,110,78,82,-82,20, 
  /* [85][0][][] */ 80,11,66,-53,68,17,4,89,-32,127,-41,17,-20,97,85,50, 
  /* [86][0][][] */ -58,89,-38,21,29,70,25,12,97,29,127,-17,-25,70,8,-21, 
  /* [87][0][][] */ 11,-67,31,-43,52,-127,18,-26,43,-6,61,-28,42,-44,-46,66, 
  /* [88][0][][] */ -75,46,53,-10,103,-30,39,27,-29,-62,81,-63,71,115,103,-127, 
  /* [89][0][][] */ -30,36,-21,39,-43,127,-6,45,-40,-2,-42,5,-12,60,34,-73, 
  /* [90][0][][] */ 43,-43,55,48,127,-69,13,39,5,-81,-114,-5,-29,8,-39,8, 
  /* [91][0][][] */ -23,16,-26,-31,0,-84,-118,50,-86,-1,-127,-106,-79,-110,-1,6, 
  /* [92][0][][] */ 30,36,59,18,-127,-88,31,19,-29,30,-7,-37,-23,-72,23,1, 
  /* [93][0][][] */ 23,-127,-75,55,-30,-70,4,82,115,76,-6,80,-52,61,9,-47, 
  /* [94][0][][] */ 95,12,118,-27,19,-26,27,23,25,80,4,55,13,7,127,0, 
  /* [95][0][][] */ -37,-46,-1,-20,127,-7,22,65,-12,7,-80,-26,31,8,-74,5, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0035935717169195414, 0.0020743212662637234, 0.0044802878983318806, 0.0047406968660652637, 0.0022484445944428444, 0.0010036861058324575, 0.0055761160328984261, 0.0027034659869968891, 0.0017752107232809067, 0.0035251472145318985, 0.001376720261760056, 0.0027875574305653572, 0.0039555546827614307, 0.0069379815831780434, 0.0024404346477240324, 0.0030345951672643423, 0.0034263806883245707, 0.0024603006895631552, 0.0027793529443442822, 0.0017213569954037666, 0.0047462368384003639, 0.0013724719174206257, 0.0042639011517167091, 0.0028356199618428946, 0.0013445375952869654, 0.0039427219890058041, 0.0034253085032105446, 0.0042638871818780899, 0.0021383420098572969, 0.0038194931112229824, 0.0025045445654541254, 0.0027896540705114603, 0.0040780184790492058, 0.00091514026280492544, 0.0028273833449929953, 0.0022133267484605312, 0.0023484008852392435, 0.0025360370054841042, 0.0019151326268911362, 0.002620302839204669, 0.00083335611270740628, 0.003345714183524251, 0.0032576534431427717, 0.0019040892366319895, 0.0024639368057250977, 0.0022188627626746893, 0.0022935308516025543, 0.0026880435179919004, 0.0068122250959277153, 0.0034193508327007294, 0.0037217605859041214, 0.0025214634370058775, 0.0033869068138301373, 0.0020701289176940918, 0.0018490772927179933, 0.0061387303285300732, 0.0021357845980674028, 0.00081738497829064727, 0.003727911040186882, 0.002770968247205019, 0.0029668430797755718, 0.0012756956275552511, 0.0030949783977121115, 0.003653546329587698, 0.0014394726604223251, 0.0013555033365264535, 0.0040236115455627441, 0.0032798985484987497, 0.0029706545174121857, 0.0016323598101735115, 0.0039842608384788036, 0.0023371994029730558, 0.0038797424640506506, 0.0025604791007936001, 0.0034231331665068865, 0.0036271153949201107, 0.003327956423163414, 0.0013029569527134299, 0.0028207192663103342, 0.0023783079814165831, 0.0027459817938506603, 0.0021680442150682211, 0.0022628414444625378, 0.0011899840319529176, 0.0023508751764893532, 0.0023116450756788254, 0.0024499660357832909, 0.0039632716216146946, 0.0045318910852074623, 0.0039191856049001217, 0.0030917064286768436, 0.0014899771194905043, 0.0032846233807504177, 0.0038737957365810871, 0.0025768470950424671, 0.0025091818533837795, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4702, 11245, -19015, 3671, 11348, -16081, -40746, -7891, -6682, 7764, -16199, -13224, 7862, -10714, -5598, -4332, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0001831188565120101, 0.00015938009892124683, 0.00014616073167417198, 0.00012361747212707996, 0.00010851486877072603, 0.00013546351692639291, 7.9537159763276577e-05, 0.00016149296425282955, 8.3351987996138632e-05, 7.5799252954311669e-05, 0.0001792489638319239, 0.00012331202742643654, 0.00012126215733587742, 0.00010493667650735006, 0.00012317842629272491, 0.00012803042773157358, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,59,10,-34,79,74,-44,63,-15,123,10,57,-32,34,-19,47,41,83,47,-72,-74,64,-5,45,50,36,37,60,-40,-45,2,98,-38,10,-69,58,57,-127,-31,-1,6,-30,64,-10,-2,-59,-57,-17, 
  /* [1][0][][] */ -54,-1,-81,-49,2,87,-62,24,-10,-40,-45,31,54,-14,-27,-29,-41,-29,-9,21,-72,44,-98,-43,-52,-42,48,63,-16,-25,50,-43,7,-54,-26,53,8,-54,127,-37,-28,31,-51,-15,36,51,26,28, 
  /* [2][0][][] */ 7,2,55,-44,-34,-84,14,31,106,64,-58,4,108,-47,127,76,-79,-15,-23,27,87,-65,-30,-103,21,-38,38,-76,41,50,-32,24,35,-40,59,45,-66,17,-1,-33,32,30,58,-9,19,-74,91,-46, 
  /* [3][0][][] */ 34,-13,-22,-25,35,112,26,-8,45,-49,34,-17,-54,7,8,41,-39,-62,25,-127,-10,-8,-35,-19,-41,83,107,68,-19,-40,34,40,57,-25,89,19,-51,-58,4,32,23,15,-16,-2,25,26,-16,-29, 
  /* [4][0][][] */ 83,8,9,-42,83,64,43,-6,63,2,-103,21,29,-9,19,-14,-103,-114,-17,-89,-29,21,-39,-25,-66,127,-88,98,-74,-58,25,70,36,-48,8,-22,-9,8,-27,30,-40,-13,-5,54,-49,94,-25,-47, 
  /* [5][0][][] */ 4,-12,-48,12,-16,53,17,-27,65,53,39,93,52,-26,34,-1,-38,127,-10,40,12,3,-70,-14,44,4,-67,-34,-26,30,17,-20,-31,-3,38,16,-49,4,-84,13,95,-17,30,50,-11,10,-47,36, 
  /* [6][0][][] */ 63,30,13,79,21,-29,97,-66,-16,78,127,112,43,52,-59,56,49,-48,-88,98,46,-69,-48,49,-95,86,90,0,114,49,-25,-23,88,-54,-124,-13,97,26,12,1,11,50,51,-43,60,118,44,-12, 
  /* [7][0][][] */ -99,7,-25,29,-63,-53,19,35,72,117,-47,-65,-87,8,-21,-24,-77,101,1,115,-51,30,27,35,-28,-97,-35,-78,46,43,-1,1,-23,16,17,-25,3,-51,127,-5,-9,35,25,-12,52,73,-31,-13, 
  /* [8][0][][] */ -23,-87,54,-68,86,-56,81,-38,-31,-114,13,11,-35,5,46,30,-3,2,-41,101,4,41,-22,24,59,0,-63,-28,-127,-26,-71,-102,9,-76,-4,84,-12,31,120,22,18,6,68,123,-5,-64,-47,74, 
  /* [9][0][][] */ 30,-46,29,-59,39,78,-43,43,15,-45,-32,-20,22,-53,116,-19,9,-112,35,42,-63,55,47,-40,-22,-73,-32,86,38,74,-38,-31,-48,26,-15,127,-22,-43,-52,-25,-27,-1,35,111,59,86,-78,21, 
  /* [10][0][][] */ -12,10,-25,-8,17,23,-64,-41,44,36,62,-4,-33,-13,47,-53,-57,127,-3,53,4,-3,8,28,-38,48,4,88,27,10,-33,-16,79,3,-11,22,-9,-41,-37,30,-77,2,25,-16,16,43,26,39, 
  /* [11][0][][] */ -28,48,-14,47,35,54,-1,10,22,17,-127,-69,64,19,-10,-45,-4,24,-48,-53,-11,-3,101,0,52,17,-22,32,-12,27,-9,66,27,-17,-46,15,43,80,105,14,42,-17,56,-2,-52,-15,74,12, 
  /* [12][0][][] */ -61,-4,32,25,-69,-62,-2,-2,-42,-37,-127,16,73,-100,27,29,47,102,87,-117,-30,51,-48,-81,-4,-13,28,-33,-8,22,-14,72,67,65,32,-35,-54,-23,26,5,-28,15,59,3,33,-7,-43,-27, 
  /* [13][0][][] */ -49,-120,-50,-98,2,29,52,22,-123,18,126,-61,57,30,113,11,127,21,1,-87,82,-73,113,2,-70,2,-29,13,-56,-100,-111,4,60,-22,-72,56,25,-59,78,-68,-3,63,76,39,58,-30,96,-54, 
  /* [14][0][][] */ 64,26,-61,2,-33,20,-89,-29,-32,62,55,57,-9,-71,11,-42,65,-116,18,18,79,-67,31,-14,-13,126,-85,10,-41,-26,-91,-9,127,51,87,-17,-78,18,-17,54,-14,-36,111,-27,-49,-52,-44,55, 
  /* [15][0][][] */ -63,14,37,22,92,4,-4,31,18,69,-12,55,58,-20,-38,-22,16,45,2,-39,34,-26,-50,-49,55,-56,-41,71,-40,9,16,7,-45,0,127,-5,-90,19,59,-6,-49,-25,25,-8,-33,-29,-12,21, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0077825514599680901, 0.0067736543715000153, 0.006211831234395504, 0.0052537424489855766, 0.0046118819154798985, 0.0057571996003389359, 0.0033803293481469154, 0.0068634510971605778, 0.0035424595698714256, 0.0032214683014899492, 0.0076180808246135712, 0.0052407612092792988, 0.0051536415703594685, 0.0044598085805773735, 0.0052350829355418682, 0.0054412931203842163, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 12395, -1946, 15274, 127, 16332, -2430, 42805, 359, 9501, 34429, 4839, 29514, 2048, 12979, 39253, 30206, 420, -4062, 6007, 54670, -354, 15671, -268, 13253, 19286, 34200, 2343, -1850, -1389, 15048, 22016, -384, 763, -408, 3345, 17905, 8663, 30134, 3161, 17724, 32109, 3554, 929, 18132, -1051, 1220, 64223, 27879, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.586544961668551e-05, 0.00012331001926213503, 7.8275290434248745e-05, 0.00010184267011936754, 0.00014757846656721085, 7.5248659413773566e-05, 4.8241749027511105e-05, 0.00018565056961961091, 9.3743714387528598e-05, 6.4177125750575215e-05, 5.5973840062506497e-05, 7.9006269515957683e-05, 5.6644843425601721e-05, 8.8022956333588809e-05, 3.8882950320839882e-05, 6.9480061938520521e-05, 0.00011352449655532837, 6.7964712798129767e-05, 0.0001466716785216704, 3.9810853195376694e-05, 0.0001056995679391548, 6.0249483794905245e-05, 8.6846564954612404e-05, 9.1981251898687333e-05, 5.5538843298563734e-05, 7.0437687099911273e-05, 5.4528522014152259e-05, 4.4410422560758889e-05, 0.00027809661696664989, 8.8306223915424198e-05, 7.6884723966941237e-05, 0.00026478790096007288, 0.00012291401799302548, 0.0001875652524176985, 5.866533683729358e-05, 4.7204775910358876e-05, 8.7645435996819288e-05, 4.9541071348357946e-05, 7.6022530265618116e-05, 9.9600176326930523e-05, 5.1143812015652657e-05, 0.00012672602315433323, 0.00024622774799354374, 5.1132090447936207e-05, 0.00014017804642207921, 5.9758189308922738e-05, 2.8109792765462771e-05, 4.0491951949661598e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -101,40,-127,120,-89,73,-64,41,-98,-74,74,-58,57,-86,-32,-75,72,95,75,-120,71,-102,80,-92,-118,-57,33,124,-110,-53,-61,57,47,-84,87,-111,-64,-80,84,-38,-16,-121,85,-90,100,55,-119,-67, -127,73,-62,127,-67,127,-45,96,-96,-113,100,-66,100,-127,-56,-80,75,127,127,-121,86,-127,110,-127,-127,-90,58,120,31,-84,-70,72,49,-127,91,-80,-87,-127,108,-56,-119,94,102,-119,-34,110,-123,-111, -69,70,19,43,4,63,-41,34,-45,-31,35,-28,50,-18,-10,-30,46,64,50,-21,52,-42,64,-46,-118,-35,18,30,108,-19,-85,19,14,-75,63,-73,-8,-21,50,-51,-124,-34,40,-50,-57,76,-61,-53, 
  /* [0][1][][] */ -75,79,-40,96,-72,80,-117,90,-119,-80,100,-106,94,-114,-83,-117,119,98,-69,-98,94,-81,125,-66,-95,-69,89,127,-127,-76,-102,92,127,25,105,-123,-108,-102,101,-81,-114,-127,109,-127,127,61,-119,-104, -84,127,-85,102,-127,115,-127,116,-127,-127,127,-127,127,-120,-127,-127,127,125,-69,-127,127,-114,127,-119,-91,-127,127,91,23,-127,-127,127,126,38,127,-111,-127,-113,127,-127,-120,125,127,-108,-57,127,-127,-127, -70,87,-63,51,-41,46,-89,73,-25,-51,54,-79,75,-78,-54,-25,62,60,-44,-26,60,-51,75,-52,-114,-47,55,46,96,-51,-102,48,74,24,58,-65,-23,-6,68,-81,-83,-85,31,-101,-79,76,-26,-77, 
  /* [0][2][][] */ -52,68,-3,46,-32,66,-94,52,-44,-27,40,-72,44,-52,-45,-84,81,31,-83,-22,31,-18,44,-13,-76,-30,61,24,-80,-54,-48,112,73,55,33,-127,-39,-30,46,-30,-127,-63,92,-85,84,30,-109,-88, -44,77,-58,69,-48,41,-92,127,-64,-40,73,-89,67,-71,-86,-77,90,43,-100,-29,61,-21,61,-33,-36,-71,60,31,10,-95,-52,64,35,63,53,-116,-50,-39,40,-41,-57,66,59,-117,-20,46,-97,-90, -44,63,-60,23,-34,35,-44,77,1,-7,26,-48,41,-16,-55,-14,39,35,-64,1,35,-10,33,2,-61,-28,43,8,50,-46,-30,12,22,51,27,-62,-12,10,25,-57,-8,-32,6,-100,-32,45,-6,-52, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0032242815941572189, 0.0052406759932637215, 0.0033266998361796141, 0.0043283132836222649, 0.0062720845453441143, 0.0031980678904801607, 0.0020502742845565081, 0.0078901490196585655, 0.0039841076359152794, 0.0027275276370346546, 0.0023788881953805685, 0.0033577664289623499, 0.0024074057582765818, 0.003740975633263588, 0.001652525388635695, 0.00295290257781744, 0.0048247911036014557, 0.0028885002247989178, 0.0062335464172065258, 0.001691961195319891, 0.0044922316446900368, 0.0025606029666960239, 0.0036909789778292179, 0.0039092032238841057, 0.0023604007437825203, 0.0029936016071587801, 0.0023174621164798737, 0.0018874428933486342, 0.011819105595350266, 0.0037530143745243549, 0.003267600666731596, 0.011253485456109047, 0.0052238455973565578, 0.007971523329615593, 0.0024932767264544964, 0.0020062029361724854, 0.0037249308079481125, 0.0021054954268038273, 0.0032309575472027063, 0.0042330073192715645, 0.0021736118942499161, 0.0053858556784689426, 0.010464678518474102, 0.0021731138695031404, 0.0059575666673481464, 0.0025397229474037886, 0.0011946661397814751, 0.0017209079815074801, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1778, -979, 788, -2169, 4906, -428, 4412, -2494, 1117, 946, 1311, 4305, 641, -379, 288, 3954, -1891, 2502, 5226, 483, -1794, 2826, -715, 3781, 1575, 2031, 1082, -502, 6141, -215, 2247, -1797, -933, 3025, -658, 1745, 1803, 653, 594, 3923, 2179, 6776, -3668, 1344, 4748, 194, 1591, 2400, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00023654491815250367, 0.00032522022956982255, 0.00031854165717959404, 0.00022558610362466425, 0.00018297304632142186, 0.0002331403229618445, 0.00017338615725748241, 0.00020261385361663997, 0.00028893191483803093, 0.00027424344443716109, 0.00028019907767884433, 0.00018728576833382249, 0.00028020580066367984, 0.00040102258208207786, 0.00028800757718272507, 0.00020415228209458292, 0.00025677666417323053, 0.00031161471270024776, 0.00017037415818776935, 0.00033739017089828849, 0.00022950123820919544, 0.00019590114243328571, 0.00022134947357699275, 0.00020160780695732683, 0.00024055855465121567, 0.00022435741266235709, 0.00028326970641501248, 0.00031827227212488651, 0.00014655760605819523, 0.00031566084362566471, 0.00022788780916016549, 0.00018794269999489188, 0.00020583301375154406, 0.00025940226623788476, 0.00026153170620091259, 0.00027038043481297791, 0.00023742992198094726, 0.00033140144660137594, 0.00021220161579549313, 0.00019929744303226471, 0.00028472184203565121, 0.00012375930964481086, 0.0001534252951387316, 0.00026820329367183149, 0.00016091615543700755, 0.00025694823125377297, 0.0003016048576682806, 0.00023045715352054685, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 60,32,127,-30,65,95,-75,-45, 
  /* [1][0][][] */ 11,-67,-127,7,45,40,27,8, 
  /* [2][0][][] */ -127,-8,-41,-27,54,18,-68,-38, 
  /* [3][0][][] */ 35,64,127,-80,-3,-82,-6,-22, 
  /* [4][0][][] */ -127,21,-65,-15,44,13,-46,-51, 
  /* [5][0][][] */ -108,36,-51,-4,4,38,-90,-127, 
  /* [6][0][][] */ -44,-127,-118,41,109,13,10,43, 
  /* [7][0][][] */ -67,-127,-117,-75,-64,-47,9,92, 
  /* [8][0][][] */ 87,30,-11,1,87,-65,-127,15, 
  /* [9][0][][] */ -34,40,-41,80,-58,-36,127,-40, 
  /* [10][0][][] */ -15,127,30,56,123,-38,-10,60, 
  /* [11][0][][] */ -80,-33,-19,-12,-93,107,127,-4, 
  /* [12][0][][] */ 72,34,-127,50,-8,-36,-78,-20, 
  /* [13][0][][] */ 54,-24,-62,12,20,-127,-32,-22, 
  /* [14][0][][] */ 23,-74,82,-2,127,-96,-55,0, 
  /* [15][0][][] */ -34,-57,8,127,74,66,-71,9, 
  /* [16][0][][] */ 121,35,-44,15,72,-108,-127,-20, 
  /* [17][0][][] */ 59,127,56,78,46,48,18,-89, 
  /* [18][0][][] */ 46,-7,3,-10,127,11,33,-5, 
  /* [19][0][][] */ 3,127,35,15,-104,10,26,-27, 
  /* [20][0][][] */ -39,16,49,-127,24,14,-19,105, 
  /* [21][0][][] */ -44,86,45,-127,29,73,-23,121, 
  /* [22][0][][] */ -66,-65,-102,17,-127,114,103,-22, 
  /* [23][0][][] */ 86,31,-127,8,3,-55,-64,-19, 
  /* [24][0][][] */ -60,49,23,-3,-7,74,-127,112, 
  /* [25][0][][] */ -106,-51,-127,17,-57,-68,64,93, 
  /* [26][0][][] */ 36,-1,-37,-34,127,-15,127,-26, 
  /* [27][0][][] */ 127,-69,32,103,-7,20,-19,101, 
  /* [28][0][][] */ 46,50,39,-11,127,-49,62,-20, 
  /* [29][0][][] */ -10,-10,-42,-45,-86,17,127,-16, 
  /* [30][0][][] */ 44,-127,-59,-56,-91,-10,13,-71, 
  /* [31][0][][] */ 4,32,-8,-8,-127,6,-26,-1, 
  /* [32][0][][] */ 30,-59,-54,73,1,-91,110,-127, 
  /* [33][0][][] */ 64,127,47,43,36,-39,-27,-25, 
  /* [34][0][][] */ -127,-36,121,1,-24,103,107,1, 
  /* [35][0][][] */ -31,75,127,-15,-65,-63,-36,30, 
  /* [36][0][][] */ -125,9,124,-26,-30,127,101,41, 
  /* [37][0][][] */ -12,-70,-8,-127,-35,-81,56,62, 
  /* [38][0][][] */ 40,-16,91,-52,56,68,-127,7, 
  /* [39][0][][] */ -11,81,-127,-40,-28,9,13,88, 
  /* [40][0][][] */ 63,-57,18,44,14,0,2,127, 
  /* [41][0][][] */ -43,103,127,-17,-2,61,-85,20, 
  /* [42][0][][] */ 63,-127,-121,-14,-113,-2,8,-107, 
  /* [43][0][][] */ 1,-66,42,-64,127,-32,13,24, 
  /* [44][0][][] */ -3,101,127,16,12,69,-61,12, 
  /* [45][0][][] */ -36,38,14,82,-108,49,-127,17, 
  /* [46][0][][] */ -35,-37,59,37,-127,-114,-30,3, 
  /* [47][0][][] */ -22,78,40,-103,-127,31,-28,77, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023846805561333895, 0.0032786431256681681, 0.0032113143242895603, 0.0022742014843970537, 0.0018446063622832298, 0.0023503578267991543, 0.0017479581292718649, 0.0020426113624125719, 0.002912809606641531, 0.0027647307142615318, 0.0028247712180018425, 0.0018880842253565788, 0.0028248392045497894, 0.0040428293868899345, 0.0029034912586212158, 0.0020581206772476435, 0.0025886429939419031, 0.0031414818949997425, 0.00171759317163378, 0.0034013320691883564, 0.0023136711679399014, 0.0019749384373426437, 0.0022314907982945442, 0.0020324690267443657, 0.0024251432623714209, 0.0022618146613240242, 0.0028557272162288427, 0.0032085988204926252, 0.0014774913433939219, 0.0031822719611227512, 0.002297405619174242, 0.0018947069765999913, 0.0020750646945089102, 0.0026151123456656933, 0.0026365797966718674, 0.0027257867623120546, 0.0023936026263982058, 0.0033409579191356897, 0.0021392684429883957, 0.0020091775804758072, 0.0028703666757792234, 0.001247654901817441, 0.0015467265620827675, 0.0027038382831960917, 0.0016222442500293255, 0.0025903724599629641, 0.0030405693687498569, 0.002323308028280735, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 538, 758, 24298, 2546, 5336, -13586, -464, -15384, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.0520582085009664e-05, 8.8418433733750135e-05, 0.00015531036478932947, 0.00010346755152568221, 0.00014967101742513478, 0.00011903867562068626, 9.3084665422793478e-05, 8.4251747466623783e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -49,-42,-12,-63,-3,-31,87,90,-109,-80,-28,-3,-66,-9,-58,26,-81,10,6,127,46,-32,26,98,80,65,21,-7,-91,-64,-85,-65,-57,110,37,-45,19,-39,94,-6,45,13,-7,-100,37,-39,-27,-86, 
  /* [1][0][][] */ -4,49,-26,-21,-67,40,-30,-47,-38,67,-5,12,37,44,-52,-11,-18,-110,70,-49,127,8,-58,20,56,-8,-88,42,37,-14,62,29,-30,-19,16,-15,-3,105,-21,-26,59,25,-17,2,108,21,-32,61, 
  /* [2][0][][] */ -21,-42,118,4,96,-45,-8,30,-33,-4,-14,59,13,-48,-48,-127,-55,-100,-19,16,-101,35,-54,-34,-50,23,1,-49,-33,2,-34,-11,-1,-7,30,-11,42,-33,-59,1,39,-32,24,-51,-46,-33,-72,-50, 
  /* [3][0][][] */ 50,13,60,15,18,-56,22,62,-60,-33,50,-33,-88,61,-24,41,51,35,-52,16,-120,-72,127,-11,-5,-12,-74,-58,-56,65,112,-60,3,-121,-15,42,-35,-92,-16,69,-80,-70,52,-12,-96,-69,45,-17, 
  /* [4][0][][] */ 19,-22,71,-23,3,-3,-4,7,-56,-11,-26,0,44,-68,32,-94,38,36,2,-36,12,33,13,14,5,13,50,-19,32,24,-127,-15,-25,-19,17,16,43,-9,40,5,-33,-16,-73,24,-14,-93,6,28, 
  /* [5][0][][] */ 24,-48,57,34,27,15,22,-1,-70,-13,-50,36,29,11,12,-46,90,81,-9,-20,89,-60,127,-98,-30,41,-6,43,7,23,-33,-51,-7,-53,-47,11,39,32,69,8,-84,19,34,19,61,-7,83,-10, 
  /* [6][0][][] */ -42,54,-122,79,46,30,23,19,-21,1,64,-66,-96,-16,-34,32,-123,33,-9,86,20,47,-88,-86,-4,-13,26,80,-37,-30,-38,14,36,77,-49,-19,-14,-5,85,1,67,63,-117,-44,-28,127,-56,-26, 
  /* [7][0][][] */ 32,62,-80,21,15,73,127,86,50,67,-101,14,-29,1,-70,-33,24,38,126,98,86,7,122,38,99,94,-31,97,-65,31,9,-81,23,-60,-22,26,16,79,-53,83,-63,52,10,-61,73,-25,57,-28, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0029971245676279068, 0.0037577832117676735, 0.0066006900742650032, 0.0043973708525300026, 0.0063610179349780083, 0.005059143528342247, 0.0039560981094837189, 0.0035806992091238499, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -47, 8469, -1225, -1539, -679, -1198, 1098, -1306, -2718, 94, -8370, -141, 2240, -770, -3639, 4388, 4926, 3885, -801, -4755, -8378, -3612, 13222, -2786, -1042, 909, 7644, -5725, -1371, 873, -13108, 11821, 3247, 654, 3603, -288, -1, -691, 12792, 1944, 4602, -4537, 5325, 6034, -2634, 10862, -4016, -85, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032906935666687787, 0.00017303609638474882, 0.00073110824450850487, 0.00024867622414603829, 0.00030402801348827779, 0.00032692603417672217, 0.00022835111303720623, 0.00041616646922193468, 0.00011534455552464351, 0.00037144098314456642, 0.00017129105981439352, 0.0017407449195161462, 0.00052069238154217601, 0.00071201712125912309, 0.00032807383104227483, 0.00072327855741605163, 0.00021915881370659918, 7.1950234996620566e-05, 0.00021695556642953306, 0.00030013755895197392, 0.00024932966334745288, 0.00025277162785641849, 0.00010032516729552299, 0.00058709108270704746, 0.00024208115064539015, 0.0003580255142878741, 0.00066295766737312078, 0.00022193304903339595, 0.00025509533588774502, 0.00044906718540005386, 9.2823313025292009e-05, 0.00013416814908850938, 0.00017339199257548898, 0.00026262379833497107, 0.00015599666221532971, 0.00034261625842191279, 0.0026460788212716579, 0.00042432310874573886, 0.00012134128337493166, 0.00019557149789761752, 0.00021133518021088094, 0.00010711426148191094, 0.00026544873253442347, 0.00019559556676540524, 0.00031193031463772058, 8.5462575952988118e-05, 7.9047218605410308e-05, 0.00018462749721948057, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 2,-44,13,11,-11,-99,-44,58,-48,-7,-20,14,37,-5,-5,2,112,-1,37,6,6,-21,-57,9,-6,-19,-15,-36,-68,81,18,-121,65,-9,-54,-50,-11,-13,-1,-30,-19,56,-2,-2,2,44,127,-6, -127,-95,-20,127,-55,68,-93,127,14,10,34,-3,45,28,-1,-40,-43,66,28,21,11,116,14,127,127,-41,-64,39,78,-127,25,-64,83,-7,-41,-127,28,17,-44,-55,-127,13,-92,-127,43,45,44,109, -4,1,12,17,-17,30,44,36,0,-36,0,0,-34,10,-7,6,-71,40,-67,-19,-1,-27,127,14,-59,6,-5,-7,20,38,39,-17,12,-27,-30,58,5,1,7,45,26,-27,23,-36,0,45,-18,-25, 
  /* [0][1][][] */ -18,-24,-24,4,34,-85,126,-65,-20,5,25,44,127,14,9,-34,-25,-43,50,40,79,-47,46,7,-58,127,-91,-18,127,-99,61,-127,-43,1,-69,26,15,-46,-54,-9,123,127,-1,-100,-55,-68,-2,105, 93,-127,127,6,127,70,-63,-56,31,127,127,-127,-99,127,127,127,127,127,121,127,127,127,6,12,124,-115,-127,127,43,127,127,27,-127,127,127,123,-127,127,-127,-121,43,58,-127,-27,127,-127,-43,71, 25,49,-39,2,-42,127,-112,64,99,-72,35,62,-48,21,12,-63,7,13,-127,18,23,-90,-40,-4,74,-18,-21,97,-73,-46,35,-49,-23,10,95,-36,38,-13,-6,-106,116,11,31,37,-50,93,100,-84, 
  /* [0][2][][] */ 3,25,8,-26,4,-38,-18,7,-6,0,11,8,-23,-25,12,-5,-58,-5,33,-37,7,1,93,-24,-105,-6,38,-20,16,2,19,-8,-10,-15,-74,45,-3,-8,-1,39,-23,1,-5,-1,-11,11,2,18, 38,-10,-34,-31,29,43,127,-91,127,-34,10,9,-76,-31,-6,-69,-21,73,6,20,3,52,-17,-41,-82,50,95,-3,-92,3,-20,-19,-19,-5,-41,7,60,-15,-23,127,-111,12,-20,45,36,53,26,-127, -8,43,4,-14,-11,0,-3,-54,-25,-15,8,5,15,-13,-1,14,44,28,-17,-15,-1,3,-48,-27,10,-32,29,-7,-11,-2,8,7,41,-21,-22,-52,-15,2,21,23,-5,-7,1,1,-12,18,103,-45, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013985447585582733, 0.0073540336452424526, 0.031072098761796951, 0.010568738915026188, 0.01292118988931179, 0.013894355855882168, 0.0097049223259091377, 0.017687074840068817, 0.0049021434970200062, 0.015786241739988327, 0.0072798696346580982, 0.07398165762424469, 0.022129425778985023, 0.030260726809501648, 0.013943137601017952, 0.03073933906853199, 0.0093142492696642876, 0.0030578849837183952, 0.0092206113040447235, 0.012755845673382282, 0.010596510954201221, 0.010742793790996075, 0.0042638196609914303, 0.024951370432972908, 0.010288449004292488, 0.015216084197163582, 0.028175700455904007, 0.0094321547076106071, 0.010841552168130875, 0.0190853551030159, 0.0039449906907975674, 0.0057021463289856911, 0.0073691597208380699, 0.011161510832607746, 0.0066298581659793854, 0.014561191201210022, 0.11245834827423096, 0.018033731728792191, 0.005157004576176405, 0.0083117885515093803, 0.008981744758784771, 0.0045523559674620628, 0.011281570419669151, 0.0083128111436963081, 0.013257037848234177, 0.0036321594379842281, 0.0033595068380236626, 0.0078466683626174927, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2234, 2909, 9879, 1524, 2447, -1700, 3152, 12248, 2319, -873, 2991, -1885, 14207, -1836, 1656, 20276, -359, 2542, 147, 2455, 4295, 3355, 713, 21047, 6445, 2895, 27818, 1511, 4334, 4971, 611, 1317, 454, 1517, -183, 139, -2310, -767, 2515, 2346, 4537, 2058, 4033, 3981, 3469, 2261, 1562, 5065, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00023510806204285473, 0.0002902290434576571, 9.6496412879787385e-05, 0.00019801399321295321, 0.00022206235735211521, 0.00025191809982061386, 0.00023422598314937204, 7.9810335591901094e-05, 0.00023607067123521119, 0.00024354842025786638, 0.0002687922096811235, 0.00024830948677845299, 7.0600777689833194e-05, 0.0002359140053158626, 0.00027714009047485888, 5.4854408517712727e-05, 0.00031972501892596483, 0.00019216921646147966, 0.00028256114455871284, 0.0002419931988697499, 0.00017967105668503791, 0.00021281182125676423, 0.00035639668931253254, 5.1973260269733146e-05, 0.00013864459469914436, 0.00020239688456058502, 4.1188646719092503e-05, 0.00025703845312818885, 0.00018427522445563227, 0.00016090631834231317, 0.00039721853681840003, 0.00040225789416581392, 0.0002802726230584085, 0.00026635621907189488, 0.00033185386564582586, 0.00032633019145578146, 0.00024038316041696817, 0.00025869312230497599, 0.00023340772895608097, 0.00023003364913165569, 0.00016914286243263632, 0.00025580477085895836, 0.00020335012231953442, 0.00020520958059933037, 0.00019700528355315328, 0.00028897664742544293, 0.00043944359640590847, 0.00014903667033649981, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 62,127,-98,-90,18,91,43,53, 
  /* [1][0][][] */ 59,-66,58,-127,-58,72,-93,-36, 
  /* [2][0][][] */ -30,115,127,42,102,11,47,12, 
  /* [3][0][][] */ 110,31,-111,67,-7,-106,-127,-49, 
  /* [4][0][][] */ -20,20,7,-85,-39,119,127,42, 
  /* [5][0][][] */ 21,86,-127,-74,51,100,27,-20, 
  /* [6][0][][] */ 1,106,57,85,88,13,32,-127, 
  /* [7][0][][] */ 127,-16,-23,9,13,-4,101,28, 
  /* [8][0][][] */ 46,127,60,92,127,70,93,-81, 
  /* [9][0][][] */ 60,84,-127,-92,2,104,15,58, 
  /* [10][0][][] */ -78,-42,20,-46,-26,-42,-62,127, 
  /* [11][0][][] */ 18,-108,-127,-12,25,-30,39,-9, 
  /* [12][0][][] */ -34,-73,-99,-40,-127,19,-78,65, 
  /* [13][0][][] */ -4,7,-96,96,-127,-20,7,-26, 
  /* [14][0][][] */ -63,-35,-127,1,33,3,-14,-59, 
  /* [15][0][][] */ 27,-115,-127,17,-78,-36,-24,-25, 
  /* [16][0][][] */ 127,-78,-17,76,-87,13,24,83, 
  /* [17][0][][] */ -18,125,127,-22,-48,4,-27,-37, 
  /* [18][0][][] */ 1,-127,54,67,6,-72,45,-87, 
  /* [19][0][][] */ 127,-29,-54,32,-108,12,42,110, 
  /* [20][0][][] */ -31,-127,88,78,-12,-93,-1,-73, 
  /* [21][0][][] */ 0,-46,-9,-33,127,5,42,24, 
  /* [22][0][][] */ -127,40,-93,49,50,73,-95,-109, 
  /* [23][0][][] */ -76,-52,50,-1,-117,127,118,-41, 
  /* [24][0][][] */ -24,62,-2,-30,-76,127,117,17, 
  /* [25][0][][] */ -30,-127,-115,-33,-43,-29,-27,-59, 
  /* [26][0][][] */ -9,52,-12,127,-76,27,-43,6, 
  /* [27][0][][] */ 14,-118,32,78,12,-57,0,-127, 
  /* [28][0][][] */ 3,127,72,40,96,-41,16,-66, 
  /* [29][0][][] */ 89,19,-14,-3,66,-127,-108,59, 
  /* [30][0][][] */ 32,-5,42,-127,35,-16,21,-32, 
  /* [31][0][][] */ 53,-39,3,68,-16,37,13,127, 
  /* [32][0][][] */ -83,-58,39,-58,-80,127,79,118, 
  /* [33][0][][] */ -19,43,34,-36,31,127,-101,77, 
  /* [34][0][][] */ 18,127,-64,-39,16,57,-50,46, 
  /* [35][0][][] */ 12,-127,37,45,-17,-51,46,-57, 
  /* [36][0][][] */ -17,-20,-80,-4,-127,-68,-29,13, 
  /* [37][0][][] */ -46,-127,77,100,-42,-96,-28,-49, 
  /* [38][0][][] */ -71,25,60,-68,-127,-88,-62,88, 
  /* [39][0][][] */ 54,-127,64,63,7,-75,12,-81, 
  /* [40][0][][] */ 1,55,16,74,-127,1,-51,-5, 
  /* [41][0][][] */ 101,127,-85,-103,58,14,-10,17, 
  /* [42][0][][] */ -7,-38,-16,13,127,24,49,19, 
  /* [43][0][][] */ 127,22,69,22,-69,-23,57,106, 
  /* [44][0][][] */ 67,34,-17,30,64,-114,-127,25, 
  /* [45][0][][] */ 47,13,27,19,67,-127,-5,-51, 
  /* [46][0][][] */ 50,-33,-12,127,31,61,18,62, 
  /* [47][0][][] */ -127,-87,84,78,-64,-12,106,-83, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0029741018079221249, 0.0036713788285851479, 0.0012206734390929341, 0.0025048642419278622, 0.0028090744744986296, 0.0031867476645857096, 0.0029629436321556568, 0.0010095955803990364, 0.0029862788505852222, 0.0030808718875050545, 0.0034002040047198534, 0.0031410988885909319, 0.00089309533359482884, 0.0029842969961464405, 0.003505804343149066, 0.00069390475982800126, 0.0040445011109113693, 0.0024309281725436449, 0.0035743801854550838, 0.0030611983966082335, 0.0022728273179382086, 0.0026920558884739876, 0.0045083952136337757, 0.00065745838219299912, 0.001753845252096653, 0.0025603075046092272, 0.00052103371126577258, 0.0032515199854969978, 0.0023310696706175804, 0.0020354546140879393, 0.0050247889012098312, 0.0050885365344583988, 0.0035454307217150927, 0.0033693888690322638, 0.0041979299858212471, 0.0041280561126768589, 0.0030408315360546112, 0.0032724514603614807, 0.0029525926802307367, 0.0029099108651280403, 0.0021396463271230459, 0.0032359138131141663, 0.0025723660364747047, 0.0025958879850804806, 0.0024921041913330555, 0.0036555358674377203, 0.0055589331313967705, 0.0018853043438866735, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 8526, 15619, -5460, 8638, -986, 4555, -13299, -16993, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00023856546613387764, 0.00012537823931779712, 0.00012972162221558392, 0.00015254782920237631, 0.00018278937204740942, 0.00016350366058759391, 0.0001720138534437865, 0.0001313858520006761, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-2,29,15,-37,-14,10,6,-47,-4,-64,-61,-26,-63,-6,-32,49,-42,36,46,-21,30,-40,10,3,-43,55,-16,-8,-15,18,7,84,33,37,-127,19,-4,-18,-34,4,-13,42,53,37,6,27,2, 
  /* [1][0][][] */ -2,45,66,-20,-14,41,-42,-22,3,21,-14,-92,12,94,-19,55,-19,24,-30,-59,2,-78,-27,19,-70,-11,-5,-110,-25,-10,37,-62,52,83,-40,2,127,-35,1,52,-37,48,-83,-29,115,-21,-34,-20, 
  /* [2][0][][] */ -9,-4,-58,14,-9,47,32,10,-3,37,-3,28,76,-94,18,-60,31,-91,25,36,-26,55,2,24,-14,63,-23,-68,20,6,20,-75,-46,-84,37,-25,100,19,-16,-60,-3,28,90,24,127,26,21,21, 
  /* [3][0][][] */ -7,23,-72,41,15,-51,-72,-102,16,-30,-44,1,2,18,39,82,-17,19,-46,31,1,-106,29,-60,-82,-6,127,-20,-48,-1,-64,21,-5,-88,1,-21,-28,-46,-23,112,-52,-39,-8,9,40,0,-47,45, 
  /* [4][0][][] */ -24,-48,-2,11,31,-31,-14,-7,27,-34,58,-78,6,29,9,10,-14,-25,11,-17,-5,-47,4,-16,14,-6,42,48,32,22,-14,31,-7,-2,11,1,-73,85,36,-26,33,-21,-20,-23,-78,10,127,8, 
  /* [5][0][][] */ 48,-24,2,14,25,-41,32,-127,29,-30,-14,116,-81,65,30,-61,-1,-88,18,10,-45,63,-46,-46,-63,78,-29,0,-18,46,-40,-39,24,52,29,-11,-39,-10,-46,-41,15,-38,-49,-9,-37,52,89,25, 
  /* [6][0][][] */ 53,-29,19,-10,-34,-16,-33,20,-38,8,-39,127,-41,-36,-4,53,7,48,23,27,33,-81,-21,20,25,38,-64,3,17,-41,16,39,7,11,-12,-3,12,3,-5,-7,-7,-14,43,55,-4,-33,71,-14, 
  /* [7][0][][] */ -27,6,-3,71,27,33,9,31,16,2,66,-2,116,107,61,45,47,48,-10,-1,24,-18,-88,-23,15,1,-32,56,32,-23,-34,-19,41,-1,33,-96,-72,39,35,54,-24,31,80,127,-58,-20,-106,59, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010139032267034054, 0.0053285751491785049, 0.0055131688714027405, 0.0064832828938961029, 0.0077685480937361717, 0.0069489055313169956, 0.0073105883784592152, 0.0055838986299932003, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 9916, 3450, 4289, -1114, 294, -2456, -452, 31908, 957, 522, 7767, 55106, 1683, 3039, 556, 11313, 574, 14409, -482, 6820, 14783, 391, 4195, -11356, 9558, 1151, 987, 12861, -42, -1577, -9324, 14188, 4681, 972, -88, 7015, -9119, 15246, 913, 23252, -1073, -1400, 6181, 1985, 1375, -173, 3313, -130, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.516509504057467e-05, 9.8207761766389012e-05, 0.00015448503836523741, 0.00019598347716964781, 0.00074516056338325143, 0.00016676641826052219, 0.00013659366231877357, 0.0001035126915667206, 0.00013464692165143788, 7.0143141783773899e-05, 6.5342210291419178e-05, 5.2120631153229624e-05, 7.264983287313953e-05, 7.5311589171178639e-05, 0.00029793870635330677, 0.00012828448961954564, 0.00012043783499393612, 0.00041174862417392433, 0.00013972325541544706, 0.00016083066293504089, 0.00012184485967736691, 0.00032955213100649416, 0.00012685237743426114, 0.00023551296908408403, 0.00015256389451678842, 8.4540886746253818e-05, 6.1126840591896325e-05, 8.1613325164653361e-05, 0.00017661560559645295, 0.0009155061561614275, 0.00025830141385085881, 6.4923755417112261e-05, 8.6234766058623791e-05, 0.00012324553972575814, 0.00015261604858096689, 5.6991666497197002e-05, 7.4945608503185213e-05, 3.8407153624575585e-05, 0.0001472675648983568, 5.4451244068332016e-05, 0.00013952252629678696, 0.0001550843589939177, 6.7716035118792206e-05, 9.222016524290666e-05, 7.6299656939227134e-05, 0.00040480040479451418, 6.1963917687535286e-05, 0.00020158605184406042, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-85,-15,-29,127,-45,75,-45,-81,-81,-21,-46,125,37,61,-127,55,-36,7,-24,-72,80,-5,36,1,54,64,-28,67,-69,11,-53,-127,-86,50,68,23,81,94,-83,-122,-18,41,79,60,-127,95,70, -43,-104,-67,58,-86,97,75,-68,-77,54,67,-111,127,82,91,-63,-97,-83,36,-68,-90,88,-70,108,-89,105,98,-127,101,-54,2,-110,-46,-87,73,127,127,120,103,-100,-127,-50,64,84,79,103,106,73, 25,-52,-46,97,-44,-20,38,-9,72,26,35,-63,23,47,-57,-15,-89,-18,42,-39,-35,9,-97,-5,-80,48,24,-89,19,53,127,-70,16,5,-9,48,79,60,52,-5,-29,88,49,39,40,36,28,-120, 
  /* [0][1][][] */ -103,-90,-18,-56,-79,-66,121,-98,-127,-127,94,-75,108,47,-119,-90,127,-127,-67,-50,-112,126,-46,29,10,63,104,-57,-116,-77,4,-80,-123,-127,-127,67,40,94,11,-99,65,-26,83,126,95,97,120,-127, -127,-127,-127,-95,-24,127,127,-127,76,79,127,-127,127,127,45,-109,47,-92,-127,-127,-127,127,-127,127,-124,127,127,-125,-127,127,-14,-127,-121,-109,47,112,125,127,-15,-127,100,-83,127,127,127,-3,127,123, -42,-55,-106,127,73,-39,58,-35,60,39,10,-54,17,58,52,-68,-21,1,-17,-51,-101,12,-87,-24,-127,63,33,-83,-65,39,119,-108,-63,7,64,78,77,76,-20,-35,43,127,68,23,59,-46,29,36, 
  /* [0][2][][] */ -98,-25,14,55,-43,-22,23,-39,27,-56,35,-8,5,16,-32,-33,-83,-20,107,-23,-12,69,-63,-5,21,52,36,-25,46,69,1,-33,-15,-73,-47,39,8,3,-71,-62,26,-8,51,58,32,50,12,-87, -90,-40,-36,-74,95,53,40,-61,86,35,-24,-30,5,36,-127,-76,26,12,50,-91,-39,59,-63,65,-49,56,47,-43,62,5,-34,-61,-64,-40,-70,54,52,11,-127,-82,30,-42,74,82,42,-99,21,-11, -32,-35,-51,-38,-27,-4,21,-40,-84,19,-14,2,2,9,20,-33,32,36,0,-56,-64,22,-29,-38,-65,22,22,-20,13,-61,34,-35,-77,15,17,34,26,12,-59,-42,5,47,20,32,19,-9,14,38, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0031945165246725082, 0.0041738296858966351, 0.0065656141377985477, 0.0083292974159121513, 0.031669322401285172, 0.0070875729434192181, 0.0058052302338182926, 0.0043992893770337105, 0.00572249386459589, 0.0029810834676027298, 0.0027770437300205231, 0.0022151267621666193, 0.0030876179225742817, 0.0032007424160838127, 0.012662394903600216, 0.0054520904086530209, 0.005118608009070158, 0.017499316483736038, 0.0059382384642958641, 0.0068353032693266869, 0.0051784063689410686, 0.014005965553224087, 0.0053912256844341755, 0.010009300895035267, 0.0064839655533432961, 0.0035929875448346138, 0.0025978907942771912, 0.0034685663413256407, 0.0075061628594994545, 0.038909010589122772, 0.010977809317409992, 0.0027592596597969532, 0.003664977615699172, 0.0052379355765879154, 0.0064861816354095936, 0.0024221458006650209, 0.003185188164934516, 0.0016323040472343564, 0.0062588714063167572, 0.0023141778074204922, 0.005929707083851099, 0.0065910848788917065, 0.0028779315762221813, 0.0039193569682538509, 0.0032427352853119373, 0.017204016447067261, 0.0026334663853049278, 0.0085674067959189415, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 898, -378, -149, 794, 11603, 1979, -330, 3433, 1181, 1069, 95, 1623, 791, 482, -446, 223, 2095, 10693, 2320, -596, 760, -1039, -53, 2646, -234, -559, 1691, -22, 3173, 13793, 2249, 7, 380, -84, 2165, -22, 336, -185, 929, 866, 1353, 2082, 138, -251, 390, 1707, 995, -49, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00058109959354624152, 0.0005046823644079268, 0.00040212005842477083, 0.00044311050442047417, 8.6179061327129602e-05, 0.0003552269481588155, 0.00070531241362914443, 0.0002604894689284265, 0.00038487854180857539, 0.00060939975082874298, 0.00047426455421373248, 0.00049495103303343058, 0.00026737892767414451, 0.00042637847946025431, 0.00047546022688038647, 0.0004151489119976759, 0.00033098875428549945, 9.2538139142561704e-05, 0.00031580388895235956, 0.00040131036075763404, 0.00055913743562996387, 0.0002379945944994688, 0.00057626637862995267, 0.00031553753069601953, 0.00049512577243149281, 0.00091573846293613315, 0.00036223646020516753, 0.00097782479133456945, 0.00027971743838861585, 7.2672301030252129e-05, 0.00033015175722539425, 0.00078988907625898719, 0.00050781195750460029, 0.00046142397332005203, 0.00037290932959876955, 0.00049944070633500814, 0.00047520096995867789, 0.0007162770489230752, 0.00053060578648000956, 0.00062966602854430676, 0.00038103628321550786, 0.00034474334097467363, 0.00043634106987155974, 0.00056896219030022621, 0.00056776625569909811, 0.00029436167096719146, 0.00034603130188770592, 0.00044091243762522936, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -46,25,-6,-10,-86,-33,-127,28, 
  /* [1][0][][] */ 83,-84,-64,-55,127,-90,103,27, 
  /* [2][0][][] */ -93,124,-37,-127,51,-11,-29,31, 
  /* [3][0][][] */ 45,18,96,-4,92,127,125,-11, 
  /* [4][0][][] */ -77,-127,57,-16,-58,-126,23,-46, 
  /* [5][0][][] */ 127,-23,77,70,-77,-22,-2,-17, 
  /* [6][0][][] */ 31,35,127,-21,47,-25,-41,31, 
  /* [7][0][][] */ 32,10,-127,-40,-39,102,105,-81, 
  /* [8][0][][] */ -11,127,-40,9,54,115,45,68, 
  /* [9][0][][] */ -15,101,-69,84,17,-126,20,127, 
  /* [10][0][][] */ 1,-127,-4,-27,-88,-117,-58,-77, 
  /* [11][0][][] */ -127,-76,102,50,-1,-57,103,60, 
  /* [12][0][][] */ -27,42,-127,69,34,-46,-82,101, 
  /* [13][0][][] */ 93,-127,100,67,12,32,34,-61, 
  /* [14][0][][] */ -20,78,-25,-127,-24,-99,-17,-66, 
  /* [15][0][][] */ 46,119,31,-3,27,-62,106,-127, 
  /* [16][0][][] */ -106,-127,-47,119,-33,38,-19,77, 
  /* [17][0][][] */ -27,-105,-127,93,-61,69,-48,79, 
  /* [18][0][][] */ -109,-95,-53,77,0,79,-2,127, 
  /* [19][0][][] */ 62,-127,108,-127,11,-73,36,-42, 
  /* [20][0][][] */ -15,64,26,8,35,127,80,-4, 
  /* [21][0][][] */ 27,113,47,-31,35,-69,98,-127, 
  /* [22][0][][] */ 23,18,101,15,-11,127,32,-35, 
  /* [23][0][][] */ -119,-58,20,-76,98,88,-62,-127, 
  /* [24][0][][] */ -90,-90,48,-94,110,105,-46,-127, 
  /* [25][0][][] */ 127,13,-60,-17,17,30,-72,-8, 
  /* [26][0][][] */ -127,-31,-125,-14,-47,-36,27,-7, 
  /* [27][0][][] */ 89,36,0,-67,-127,-28,91,95, 
  /* [28][0][][] */ -127,-104,4,60,-68,-113,-7,17, 
  /* [29][0][][] */ 115,90,38,-127,23,5,-60,-102, 
  /* [30][0][][] */ -105,-77,33,-79,81,100,-60,-127, 
  /* [31][0][][] */ 51,52,-9,127,6,-84,7,11, 
  /* [32][0][][] */ -27,127,-8,36,24,73,-18,48, 
  /* [33][0][][] */ -35,127,-80,19,20,-39,-29,2, 
  /* [34][0][][] */ -127,-119,-42,116,-15,16,21,104, 
  /* [35][0][][] */ -54,127,-32,-1,63,95,49,64, 
  /* [36][0][][] */ 68,32,-6,-39,-127,-20,99,124, 
  /* [37][0][][] */ -73,110,26,20,-127,111,-25,-94, 
  /* [38][0][][] */ 37,29,25,28,127,91,113,60, 
  /* [39][0][][] */ -24,-63,26,-20,14,41,-100,127, 
  /* [40][0][][] */ -90,-77,-81,127,-35,0,2,87, 
  /* [41][0][][] */ 127,5,46,105,-48,-5,11,-35, 
  /* [42][0][][] */ -41,4,-68,-127,55,-99,-1,83, 
  /* [43][0][][] */ 29,-5,93,-10,39,127,96,2, 
  /* [44][0][][] */ -25,-19,-62,127,51,4,-40,-38, 
  /* [45][0][][] */ 64,114,108,-127,53,-76,5,-121, 
  /* [46][0][][] */ -38,-127,-43,26,-4,39,-64,123, 
  /* [47][0][][] */ 41,33,116,-4,89,127,124,-25, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0047332248650491238, 0.0041107842698693275, 0.0032753846608102322, 0.0036092638038098812, 0.00070195348234847188, 0.00289342668838799, 0.0057449745945632458, 0.0021217623725533485, 0.0031349475029855967, 0.0049637379124760628, 0.0038630224298685789, 0.0040315198712050915, 0.0021778789814561605, 0.0034729766193777323, 0.0038727615028619766, 0.0033815084025263786, 0.0026959995739161968, 0.00075375003507360816, 0.0025723143480718136, 0.0032687894999980927, 0.00455433689057827, 0.0019385351333767176, 0.0046938569284975529, 0.0025701448321342468, 0.0040329433977603912, 0.0074589555151760578, 0.0029505211859941483, 0.0079646669328212738, 0.0022783798631280661, 0.00059193698689341545, 0.0026891818270087242, 0.0064338757656514645, 0.0041362759657204151, 0.0037584323436021805, 0.0030374547932296991, 0.0040680896490812302, 0.0038706499617546797, 0.0058342847041785717, 0.0043219383805990219, 0.0051288125105202198, 0.0031036511063575745, 0.0028080346528440714, 0.0035541246179491282, 0.0046343621797859669, 0.0046246210113167763, 0.00239766133017838, 0.0028185255359858274, 0.0035913598258048296, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -8062, -3841, 11974, -9095, 21945, 8448, -9907, 10705, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018752414325717837, 0.00022361362061928958, 0.00016698232502676547, 0.00022769825591240078, 0.0001867263054009527, 0.00017074396600946784, 0.0001570581371197477, 0.00026413908926770091, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-14,-21,-62,-28,-39,21,-14,35,8,-28,-4,109,127,-22,-105, 
  /* [1][0][][] */ 127,-56,-40,18,-46,72,-72,-40,-36,84,-29,-47,-5,4,-58,-15, 
  /* [2][0][][] */ -32,-99,46,41,51,-62,-86,-25,32,-97,26,-127,49,-22,-79,26, 
  /* [3][0][][] */ 34,7,14,17,-13,71,-47,-22,127,47,8,20,2,-13,8,24, 
  /* [4][0][][] */ -91,-49,-28,-127,-13,39,62,-114,30,-19,-50,-45,-126,37,-38,-20, 
  /* [5][0][][] */ 94,46,67,-28,42,-52,-125,-127,-23,-81,68,47,-62,50,65,-49, 
  /* [6][0][][] */ 112,43,-127,-88,30,-73,0,-95,-42,20,-127,101,100,-100,7,74, 
  /* [7][0][][] */ -127,-2,98,-31,-60,5,1,-61,-52,62,88,-30,54,-22,35,26, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0079697761684656143, 0.0095035787671804428, 0.0070967487990856171, 0.0096771754324436188, 0.0079358676448464394, 0.0072566182352602482, 0.0066749705001711845, 0.011225910857319832, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 19424, -167, -240, 2045, -545, 217, 9156, 1425, 316, 240, -1688, 3178, 1460, -1249, -322, -760, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00011723799980245531, 0.0002248016680823639, 0.00018422446737531573, 0.00019393942784518003, 0.0014047356089577079, 0.0010436499724164605, 0.00017177365953102708, 0.00088629574747756124, 0.00028002468752674758, 0.001334861502982676, 0.00025052067940123379, 0.00019412842812016606, 0.00011069643369410187, 0.00019701239943969995, 0.00021995404676999897, 0.00080500682815909386, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-8,10,3,-21,11,6,16,-11,-11,-4,-9,-2,-3,1,-3, 4,-15,2,4,12,-2,15,-27,-9,9,-7,91,-18,24,7,-3, 0,-4,-7,6,1,-14,-5,10,3,2,-8,-12,-5,-2,0,-4, 
  /* [0][1][][] */ 13,-17,-1,9,127,-24,-127,-21,127,127,-4,-7,114,-21,-5,-20, -127,127,127,2,-88,-92,-13,-102,12,-106,127,127,127,127,127,127, 20,-8,-12,3,-10,127,5,-11,-1,-13,-7,-4,3,-1,-13,-11, 
  /* [0][2][][] */ 1,-5,6,-10,-20,16,67,6,-8,-8,-2,-6,-4,4,-7,-13, 23,-25,1,-127,6,-16,-5,127,-10,1,-1,-20,-13,-53,-9,-40, 2,-4,4,-4,0,-5,1,-3,1,2,-5,-3,-5,-2,-6,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0049826148897409439, 0.009554070420563221, 0.0078295394778251648, 0.0082424255087971687, 0.059701263904571533, 0.0443551205098629, 0.0073003806173801422, 0.037667568773031235, 0.011901048943400383, 0.056731615215539932, 0.010647129267454147, 0.0082504581660032272, 0.0047045983374118805, 0.0083730267360806465, 0.0093480469658970833, 0.034212790429592133, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 614, 584, -346, 936, 74342, 51886, 5366, 19866, 3467, 7098, 275, -119, 5137, 2816, -176, 33426, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00023793653235770762, 0.0010958549100905657, 0.00029497125069610775, 0.00017723794735502452, 1.8511445887270384e-05, 2.8219132218509912e-05, 0.00014562148135155439, 2.7410025722929277e-05, 0.00019920688646379858, 3.9580187149113044e-05, 0.00053084432147443295, 0.00095530989347025752, 0.00033743088715709746, 1.5477386114071123e-05, 0.00089529342949390411, 3.500632374198176e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -84, -108, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 33, 127, 20, 
  /* [1][0][][] */ 104, -95, -11, 
  /* [1][1][][] */ -127, 103, 23, 
  /* [1][2][][] */ 13, -2, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -93, -78, 
  /* [3][0][][] */ 121, 126, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 25, -54, -7, 
  /* [4][1][][] */ 27, -127, -7, 
  /* [4][2][][] */ 14, -92, -23, 
  /* [5][0][][] */ -61, 23, -4, 
  /* [5][1][][] */ -127, 28, 3, 
  /* [5][2][][] */ -83, 21, -1, 
  /* [6][0][][] */ -18, 79, 127, 
  /* [6][1][][] */ -52, 55, -17, 
  /* [6][2][][] */ -37, -53, -90, 
  /* [7][0][][] */ 39, 26, -23, 
  /* [7][1][][] */ 127, 51, -19, 
  /* [7][2][][] */ 26, -8, -36, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -85, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -26, 63, -9, 
  /* [9][1][][] */ -24, 127, -13, 
  /* [9][2][][] */ -16, 83, -7, 
  /* [10][0][][] */ 26, 89, 13, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 13, 41, 19, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 95, 27, -13, 
  /* [13][1][][] */ 127, 100, -19, 
  /* [13][2][][] */ 81, 120, 40, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -112, -37, 11, 
  /* [15][1][][] */ -127, -111, 14, 
  /* [15][2][][] */ -10, -57, -7, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.060673810541629791, 0.27944299578666687, 0.075217664241790771, 0.045195672661066055, 0.0047204182483255863, 0.0071958783082664013, 0.03713347390294075, 0.0069895563647150993, 0.050797753036022186, 0.010092946700751781, 0.13536529242992401, 0.24360400438308716, 0.086044870316982269, 0.0039467331953346729, 0.2282998114824295, 0.0089266123250126839, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.12277033179998398, } };
const TfArray<1, int> quant46_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,81,81,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.079051785171031952, } };
const TfArray<1, int> quant50_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.079198755323886871, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.099193543195724487, } };
const TfArray<1, int> quant54_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,41,41,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.060437057167291641, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.058418720960617065, } };
const TfArray<1, int> quant61_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.089293114840984344, } };
const TfArray<1, int> quant62_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.050622604787349701, } };
const TfArray<1, int> quant65_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.086755149066448212, } };
const TfArray<1, int> quant66_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,20,20,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.03306230902671814, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,20,20,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15720950067043304, } };
const TfArray<1, int> quant69_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,20,20,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 102400), (TfLiteIntArray*)&g0::tensor_dimension44, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 102400), (TfLiteIntArray*)&g0::tensor_dimension46, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 314928), (TfLiteIntArray*)&g0::tensor_dimension47, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 314928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 314928), (TfLiteIntArray*)&g0::tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 153600), (TfLiteIntArray*)&g0::tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension51, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension53, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80688), (TfLiteIntArray*)&g0::tensor_dimension55, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 80688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80688), (TfLiteIntArray*)&g0::tensor_dimension57, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 99888), (TfLiteIntArray*)&g0::tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension61, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension62, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension63, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 44800), (TfLiteIntArray*)&g0::tensor_dimension65, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension66, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension68, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension69, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
